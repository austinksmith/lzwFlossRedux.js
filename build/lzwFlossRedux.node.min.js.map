{"version":3,"sources":["webpack:///lzwFlossRedux.node.min.js","webpack:///webpack/bootstrap 435ab12082ae4dfa0198","webpack:///./lzwFlossRedux.js","webpack:///../~/hamsters.js/build/hamsters.node.min.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","lzwFlossReduxjs","this","version","encode","lzwEncode","decode","lzwDecode","value","inputString","_this","Promise","resolve","reject","run","encodeString","_this2","decodeString","fn","onSuccess","onError","_inputString","unescape","encodeURIComponent","stringArray","splitString","params","array","hamsters","promise","then","output","_output","data","decodeURIComponent","escape","catch","error","inputArray","split","outputArray","push","charCodeAt","returnCharacterCode","phrase","dictionary","n","String","fromCharCode","currentCharacter","phrasePlusChar","code","rtn","join","returnPhrase","currentCode","oldPhrase","currentPhrase","charAt","lzwFlossRedux","_interopRequireDefault","obj","__esModule","default","_version","_version2","_habitat","_habitat2","_pool","_pool2","_data","_data2","_logger","_logger2","_memoizer","_memoizer2","hamstersjs","maxThreads","logicalThreads","habitat","pool","logger","memoizer","hamstersRun","hamstersPromise","init","initializeLibrary","startOptions","processStartOptions","legacy","persistence","spawnHamsters","info","habitatKeys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","keys","Symbol","iterator","next","done","indexOf","toLowerCase","err","return","Worker","functionToRun","scope","tasks","count","aggregate","workers","memoize","dataType","input","threads","hamstersJob","prepareJob","task","scheduleTask","results","messsage","hamstersTask","majorVersion","minorVersion","patchVersion","hamstersVersion","_typeof","constructor","_wheel","_wheel2","debug","importScripts","isLegacyEnvironment","legacyWheel","browser","isBrowser","webWorker","isWebWorker","node","isNode","reactNative","isReactNative","shell","isShell","transferrable","supportsTransferrableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isIE10","isInternetExplorer","determineGlobalThreads","locateWorkerObject","sharedWorker","locateSharedWorkerObject","selectHamsterWheel","max","navigator","hardwareConcurrency","userAgent","os","cpus","SharedWorker","window","RegExp","isNaN","test","process","global","isLegacy","isLegacyDevice","supportsSharedWorkers","legacyDevice","lacksWorkerSupport","legacyAgents","supports","workerBlob","generateBlob","e","Uint8Array","SharedArrayBuffer","Proxy","worker","regular","generateWorkerBlob","hamstersHabitat","randomArray","aggregateArrays","aggregateThreadOutputs","splitArrays","splitArrayIntoSubArrays","createBlob","createDataBlob","processDataType","sortOutput","sortArray","getOutput","prepareOutput","prepareFunction","feedHamster","messageWorker","hamster","hamsterFood","postMessage","JSON","stringify","ie10","port","prepareTransferBuffers","buffers","buffer","Array","isArray","ArrayBuffer","functionBody","startingIndex","endingIndex","substring","workerLogic","hamsterBlob","dataBlobURL","URL","createObjectURL","typedArrayFromBuffer","arr","order","sort","a","b","reverse","types","uint32","Uint32Array","uint16","Uint16Array","uint8","uint8clamped","Uint8ClampedArray","int32","Int32Array","int16","Int16Array","int8","Int8Array","float32","Float32Array","float64","Float64Array","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","textContent","Blob","BlobMaker","locateBlobBuilder","blob","append","type","getBlob","Math","round","random","reduce","concat","len","bufferLength","offset","set","threadArrays","size","ceil","slice","subarray","hamstersData","logBook","warning","infoLog","warningLog","errorLog","errorFromThread","saveLogEntry","saveToLogBook","getLogEntries","fetchLogBook","createAndSaveStampedMessage","generateTimeStampedMessage","searchLogEntries","searchLogBook","message","timeStampedMessage","console","warn","record","Date","now","errorMessage","lineno","filename","eventType","logBookEntries","searchString","searchResults","eventTypeResults","tmpEntries","hasOwnProperty","findStringInLogBook","finalResults","findStringInLogBookAllTypes","total","hamstersLogger","wheel","workerScaffold","regularScaffold","legacyScaffold","self","addEventListener","incomingConnection","ports","start","incomingMessage","eval","prepareReturn","returnObject","onmessage","Function","setTimeout","hamstersWheel","running","pending","fetchHamster","grabHamster","arguments","item","runTask","threadId","spawnHamster","newWheel","threadArray","prepareMeal","registerTask","keepTrackOfThread","trainHamster","addWorkToPending","onThreadResponse","splice","parse","returnOutputAndRemoveTask","processQueue","shift","terminate","onThreadError","onmessageerror","onerror","hamsterWheel","hamsterPool","maxCacheEntries","cacheEntries","itemCached","isItemCached","fetchItem","fetchItemFromCache","saveItem","saveItemToCache","method","cacheItem","cachedResult","itemToCache","cachedItems","hamstersMemoizer"],"mappings":"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","file":"lzwFlossRedux.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: lzwFlossRedux                                                             *\n\t* Description: 100% Vanilla Javascript Multithreaded LZW Compression Library       *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar lzwFlossReduxjs = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function lzwFlossReduxjs() {\n\t    _classCallCheck(this, lzwFlossReduxjs);\n\t\n\t    this.version = '1.0.1';\n\t    this.encode = this.lzwEncode;\n\t    this.decode = this.lzwDecode;\n\t  }\n\t\n\t  /**\n\t  * @description: Generates a thread and lzw encodes the supplied string\n\t  * @method encode\n\t  * @param {string} inputString\n\t  * @param {function} onSuccess\n\t  */\n\t\n\t\n\t  _createClass(lzwFlossReduxjs, [{\n\t    key: 'lzwEncode',\n\t    value: function lzwEncode(inputString) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this.run(inputString, _this.encodeString, resolve, reject, false);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Generates a thread and decodes the supplied lzw encoded string\n\t    * @method decode\n\t    * @param {string} inputString\n\t    * @param {function} onSuccess\n\t    */\n\t\n\t  }, {\n\t    key: 'lzwDecode',\n\t    value: function lzwDecode(inputString) {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this2.run(inputString, _this2.decodeString, resolve, reject, true);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Abstracts hamsters usage for reusability\n\t    * @method run\n\t    * @param {string} inputString\n\t    * @param {function} encodeOrDecode\n\t    * @param {function} onSuccess\n\t    */\n\t\n\t  }, {\n\t    key: 'run',\n\t    value: function run(inputString, fn, onSuccess, onError, decode) {\n\t      var _inputString = inputString;\n\t      if (decode === false) {\n\t        _inputString = unescape(encodeURIComponent(inputString));\n\t      }\n\t      var stringArray = this.splitString(_inputString);\n\t      var params = {\n\t        array: stringArray\n\t      };\n\t      hamsters.promise(params, fn).then(function (output) {\n\t        var _output = output.data[0];\n\t        if (decode === true) {\n\t          _output = decodeURIComponent(escape(_output));\n\t        }\n\t        onSuccess(_output);\n\t      }).catch(function (error) {\n\t        onError(error);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Splits a string into a charcode array\n\t    * @method splitString\n\t    * @param {string} inputString\n\t    */\n\t\n\t  }, {\n\t    key: 'splitString',\n\t    value: function splitString(inputString) {\n\t      var inputArray = (inputString + \"\").split(\"\");\n\t      var outputArray = [];\n\t      for (var i = 0; i < inputArray.length; i++) {\n\t        outputArray.push(inputArray[i].charCodeAt(0));\n\t      }\n\t      return outputArray;\n\t    }\n\t\n\t    /**\n\t    * @description: Function to be executed within a thread to encode a string\n\t    * @method encodeString\n\t    * @param {params} Object\n\t    */\n\t\n\t  }, {\n\t    key: 'encodeString',\n\t    value: function encodeString() {\n\t      var returnCharacterCode = function returnCharacterCode(phrase) {\n\t        if (phrase.length > 1) {\n\t          return dictionary[phrase];\n\t        }\n\t        return phrase.charCodeAt(0);\n\t      };\n\t      var stringArray = [];\n\t      var n = 0;\n\t      for (n; n < params.array.length; n++) {\n\t        stringArray[n] = String.fromCharCode(params.array[n]);\n\t      }\n\t      var currentCharacter;\n\t      var output = [];\n\t      var dictionary = {};\n\t      var code = 256;\n\t      var phrase = stringArray[0];\n\t      var phrasePlusChar;\n\t      var i = 1;\n\t      for (i; i < stringArray.length; i++) {\n\t        currentCharacter = stringArray[i];\n\t        phrasePlusChar = dictionary[phrase + currentCharacter];\n\t        if (phrasePlusChar) {\n\t          phrase += currentCharacter;\n\t        } else {\n\t          output.push(returnCharacterCode(phrase));\n\t          dictionary[phrase + currentCharacter] = code;\n\t          code++;\n\t          phrase = currentCharacter;\n\t        }\n\t      }\n\t      output.push(returnCharacterCode(phrase));\n\t      for (i = 0; i < output.length; i++) {\n\t        rtn.data[i] = String.fromCharCode(output[i]);\n\t      }\n\t      rtn.data = rtn.data.join(\"\");\n\t    }\n\t\n\t    /**\n\t    * @description: Function to be executed within a thread to decode an already encoded string\n\t    * @method decodeString\n\t    * @param {params} Object\n\t    */\n\t\n\t  }, {\n\t    key: 'decodeString',\n\t    value: function decodeString() {\n\t      var returnPhrase = function returnPhrase(currentCode, oldPhrase, currentCharacter) {\n\t        if (typeof dictionary[currentCode] !== 'undefined') {\n\t          return dictionary[currentCode];\n\t        }\n\t        return oldPhrase + currentCharacter;\n\t      };\n\t      var stringArray = [];\n\t      var n = 0;\n\t      for (n; n < params.array.length; n++) {\n\t        stringArray[n] = String.fromCharCode(params.array[n]);\n\t      }\n\t      var currentCharacter = stringArray[0];\n\t      var oldPhrase = currentCharacter;\n\t      var code = 256;\n\t      var currentCode;\n\t      var currentPhrase;\n\t      var dictionary = {};\n\t      rtn.data.push(currentCharacter);\n\t      for (var i = 1; i < stringArray.length; i++) {\n\t        currentCode = params.array[i];\n\t        if (currentCode < 256) {\n\t          currentPhrase = stringArray[i];\n\t        } else {\n\t          currentPhrase = returnPhrase(currentCode, oldPhrase, currentCharacter);\n\t        }\n\t        rtn.data.push(currentPhrase);\n\t        currentCharacter = currentPhrase.charAt(0);\n\t        dictionary[code] = oldPhrase + currentCharacter;\n\t        oldPhrase = currentPhrase;\n\t        code++;\n\t      }\n\t      rtn.data = rtn.data.join(\"\");\n\t    }\n\t  }]);\n\t\n\t  return lzwFlossReduxjs;\n\t}();\n\t\n\tvar lzwFlossRedux = new lzwFlossReduxjs();\n\t\n\tif (true) {\n\t  var hamsters = __webpack_require__(2);\n\t}\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = lzwFlossRedux;\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\tmodule.exports =\n\t/******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\tmodule.exports = __webpack_require__(1);\n\t\n\t\n\t/***/ }),\n\t/* 1 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tvar _version = __webpack_require__(2);\n\t\t\n\t\tvar _version2 = _interopRequireDefault(_version);\n\t\t\n\t\tvar _habitat = __webpack_require__(3);\n\t\t\n\t\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\t\n\t\tvar _pool = __webpack_require__(7);\n\t\t\n\t\tvar _pool2 = _interopRequireDefault(_pool);\n\t\t\n\t\tvar _data = __webpack_require__(4);\n\t\t\n\t\tvar _data2 = _interopRequireDefault(_data);\n\t\t\n\t\tvar _logger = __webpack_require__(5);\n\t\t\n\t\tvar _logger2 = _interopRequireDefault(_logger);\n\t\t\n\t\tvar _memoizer = __webpack_require__(8);\n\t\t\n\t\tvar _memoizer2 = _interopRequireDefault(_memoizer);\n\t\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar hamstersjs = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function hamstersjs() {\n\t\t    _classCallCheck(this, hamstersjs);\n\t\t\n\t\t    this.version = _version2.default;\n\t\t    this.maxThreads = _habitat2.default.logicalThreads;\n\t\t    this.habitat = _habitat2.default;\n\t\t    this.data = _data2.default;\n\t\t    this.pool = _pool2.default;\n\t\t    this.logger = _logger2.default;\n\t\t    this.memoizer = _memoizer2.default;\n\t\t    this.run = this.hamstersRun;\n\t\t    this.promise = this.hamstersPromise;\n\t\t    this.init = this.initializeLibrary;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n\t\t  * @param {object} startOptions - Provided library functionality options\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(hamstersjs, [{\n\t\t    key: 'initializeLibrary',\n\t\t    value: function initializeLibrary(startOptions) {\n\t\t      if (typeof startOptions !== 'undefined') {\n\t\t        this.processStartOptions(startOptions);\n\t\t      }\n\t\t      if (!this.habitat.legacy && this.habitat.persistence === true) {\n\t\t        _pool2.default.spawnHamsters(this.maxThreads);\n\t\t      }\n\t\t      this.logger.info('Hamsters.js v' + this.version + ' initialized using up to ' + this.maxThreads + ' threads.');\n\t\t      delete this.init;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function processStartOptions - Adjusts library functionality based on provided options\n\t\t    * @param {object} startOptions - Provided library functionality options\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'processStartOptions',\n\t\t    value: function processStartOptions(startOptions) {\n\t\t      // Add options to override library environment behavior\n\t\t      var habitatKeys = ['worker', 'sharedworker', 'legacy', 'webworker', 'reactnative', 'atomics', 'proxies', 'transferrable', 'browser', 'shell', 'node', 'debug', 'persistence', 'importscripts'];\n\t\t      var key = null;\n\t\t      var _iteratorNormalCompletion = true;\n\t\t      var _didIteratorError = false;\n\t\t      var _iteratorError = undefined;\n\t\t\n\t\t      try {\n\t\t        for (var _iterator = Object.keys(startOptions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t          key = _step.value;\n\t\t\n\t\t          if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n\t\t            this.habitat[key] = startOptions[key];\n\t\t          } else {\n\t\t            this[key] = startOptions[key];\n\t\t          }\n\t\t        }\n\t\t        // Ensure legacy mode is disabled when we pass a third party worker library\n\t\t      } catch (err) {\n\t\t        _didIteratorError = true;\n\t\t        _iteratorError = err;\n\t\t      } finally {\n\t\t        try {\n\t\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t\t            _iterator.return();\n\t\t          }\n\t\t        } finally {\n\t\t          if (_didIteratorError) {\n\t\t            throw _iteratorError;\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t\n\t\t      if (typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n\t\t        this.habitat.legacy = false;\n\t\t      }\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @constructor\n\t\t    * @function hamstersTask - Constructs a new task object from provided arguments\n\t\t    * @param {object} params - Provided library execution options\n\t\t    * @param {function} functionToRun - Function to execute\n\t\t    * @param {object} scope - Reference to main library context\n\t\t    * @return {object} new Hamsters.js task\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'hamstersTask',\n\t\t    value: function hamstersTask(params, functionToRun, scope) {\n\t\t      this.id = scope.pool.tasks.length;\n\t\t      this.count = 0;\n\t\t      this.aggregate = params.aggregate || false;\n\t\t      this.output = [];\n\t\t      this.workers = [];\n\t\t      this.memoize = params.memoize || false;\n\t\t      this.dataType = params.dataType ? params.dataType.toLowerCase() : null;\n\t\t      this.input = params;\n\t\t      // Do not modify function if we're running on the main thread for legacy fallback\n\t\t      if (scope.habitat.legacy) {\n\t\t        this.threads = 1;\n\t\t        this.input.hamstersJob = functionToRun;\n\t\t      } else {\n\t\t        this.threads = params.threads || 1;\n\t\t        this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n\t\t      }\n\t\t    }\n\t\t  }, {\n\t\t    key: 'scheduleTask',\n\t\t    value: function scheduleTask(task, resolve, reject) {\n\t\t      this.pool.scheduleTask(task, this).then(function (results) {\n\t\t        return resolve(results);\n\t\t      }).catch(function (error) {\n\t\t        return _logger2.default.error(error.messsage, reject);\n\t\t      });\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @async\n\t\t    * @function hamstersPromise - Calls library functionality using async promises\n\t\t    * @param {object} params - Provided library execution options\n\t\t    * @param {function} functionToRun - Function to execute\n\t\t    * @return {array} Results from functionToRun.\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'hamstersPromise',\n\t\t    value: function hamstersPromise(params, functionToRun) {\n\t\t      var _this = this;\n\t\t\n\t\t      return new Promise(function (resolve, reject) {\n\t\t        var task = new _this.hamstersTask(params, functionToRun, _this);\n\t\t        _this.scheduleTask(task, resolve, reject);\n\t\t      });\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @async\n\t\t    * @function hamstersRun - Calls library functionality using async callbacks\n\t\t    * @param {object} params - Provided library execution options\n\t\t    * @param {function} functionToRun - Function to execute\n\t\t    * @param {function} onSuccess - Function to call upon successful execution\n\t\t    * @param {function} onError - Function to call upon execution failure\n\t\t    * @return {array} Results from functionToRun.\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'hamstersRun',\n\t\t    value: function hamstersRun(params, functionToRun, onSuccess, onError) {\n\t\t      var task = new this.hamstersTask(params, functionToRun, this);\n\t\t      this.scheduleTask(task, onSuccess, onError);\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return hamstersjs;\n\t\t}();\n\t\t\n\t\tvar hamsters = new hamstersjs();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamsters;\n\t\t}\n\t\n\t/***/ }),\n\t/* 2 */\n\t/***/ (function(module, exports) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar majorVersion = 5;\n\t\tvar minorVersion = 1;\n\t\tvar patchVersion = 2;\n\t\tvar hamstersVersion = majorVersion + '.' + minorVersion + '.' + patchVersion;\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersVersion;\n\t\t}\n\t\n\t/***/ }),\n\t/* 3 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tvar _data = __webpack_require__(4);\n\t\t\n\t\tvar _data2 = _interopRequireDefault(_data);\n\t\t\n\t\tvar _wheel = __webpack_require__(6);\n\t\t\n\t\tvar _wheel2 = _interopRequireDefault(_wheel);\n\t\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar habitat = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function habitat() {\n\t\t    _classCallCheck(this, habitat);\n\t\t\n\t\t    this.debug = false;\n\t\t    this.importScripts = null;\n\t\t    this.memoize = false;\n\t\t    this.persistence = true;\n\t\t    this.legacy = this.isLegacyEnvironment();\n\t\t    this.legacyWheel = _wheel2.default.legacy, this.browser = this.isBrowser();\n\t\t    this.webWorker = this.isWebWorker();\n\t\t    this.node = this.isNode();\n\t\t    this.reactNative = this.isReactNative();\n\t\t    this.shell = this.isShell();\n\t\t    this.transferrable = this.supportsTransferrableObjects();\n\t\t    this.atomics = this.supportsAtomicOperations();\n\t\t    this.proxies = this.supportsProxies();\n\t\t    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n\t\t    this.logicalThreads = this.determineGlobalThreads();\n\t\t    this.Worker = this.locateWorkerObject();\n\t\t    this.sharedWorker = this.locateSharedWorkerObject();\n\t\t    this.selectHamsterWheel = this.selectHamsterWheel;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function determineGlobalThreads - Determines max number of threads to use\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(habitat, [{\n\t\t    key: 'determineGlobalThreads',\n\t\t    value: function determineGlobalThreads() {\n\t\t      var max = 4;\n\t\t      if (typeof navigator !== 'undefined') {\n\t\t        if (typeof navigator.hardwareConcurrency !== 'undefined') {\n\t\t          max = navigator.hardwareConcurrency;\n\t\t        }\n\t\t        if (max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n\t\t          max = 20;\n\t\t        }\n\t\t      }\n\t\t      if (this.node && typeof os !== 'undefined') {\n\t\t        max = os.cpus().length;\n\t\t      }\n\t\t      return max;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function locateWorkerObject - Attempts to find a global Worker object\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'locateWorkerObject',\n\t\t    value: function locateWorkerObject() {\n\t\t      return typeof Worker !== 'undefined' ? Worker : false;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'locateSharedWorkerObject',\n\t\t    value: function locateSharedWorkerObject() {\n\t\t      return typeof SharedWorker !== 'undefined' ? SharedWorker : false;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isBrowser - Detects if execution environment is a browser\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isBrowser',\n\t\t    value: function isBrowser() {\n\t\t      return (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isInternetExplorer - Detects if execution environment is internet explorer\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isInternetExplorer',\n\t\t    value: function isInternetExplorer(version) {\n\t\t      return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isNode - Detects if execution environment is node.js\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isNode',\n\t\t    value: function isNode() {\n\t\t      return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !this.isWebWorker() && !this.browser;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isWebWorker - Detects if execution environment is a webworker\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isWebWorker',\n\t\t    value: function isWebWorker() {\n\t\t      return typeof importScripts === \"function\";\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isReactNative - Detects if execution environment is reactNative\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isReactNative',\n\t\t    value: function isReactNative() {\n\t\t      return !this.isNode() && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && !this.browser;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isShell - Detects if execution environment is a shell\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isShell',\n\t\t    value: function isShell() {\n\t\t      return this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'isLegacyEnvironment',\n\t\t    value: function isLegacyEnvironment() {\n\t\t      var isLegacy = false;\n\t\t      // Force legacy mode for known devices that don't support threading\n\t\t      if (this.browser && !this.isReactNative()) {\n\t\t        isLegacy = this.isLegacyDevice();\n\t\t      }\n\t\t      // Detect sharedWorker support for use within webworkers\n\t\t      if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n\t\t        isLegacy = !this.supportsSharedWorkers();\n\t\t      }\n\t\t      return isLegacy || !!!this.locateWorkerObject();\n\t\t    }\n\t\t  }, {\n\t\t    key: 'isLegacyDevice',\n\t\t    value: function isLegacyDevice() {\n\t\t      var legacyDevice = false;\n\t\t      var userAgent = navigator.userAgent;\n\t\t      var lacksWorkerSupport = typeof this.Worker === 'undefined';\n\t\t      var legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n\t\t      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1) {\n\t\t        legacyDevice = true;\n\t\t      }\n\t\t      return legacyDevice;\n\t\t    }\n\t\t  }, {\n\t\t    key: 'supportsSharedWorkers',\n\t\t    value: function supportsSharedWorkers() {\n\t\t      var supports = false;\n\t\t      try {\n\t\t        var workerBlob = _data2.default.generateBlob();\n\t\t        var SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n\t\t        supports = true;\n\t\t      } catch (e) {\n\t\t        supports = false;\n\t\t      }\n\t\t      return supports;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'supportsTransferrableObjects',\n\t\t    value: function supportsTransferrableObjects() {\n\t\t      return typeof Uint8Array !== 'undefined';\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'supportsAtomicOperations',\n\t\t    value: function supportsAtomicOperations() {\n\t\t      return typeof SharedArrayBuffer !== 'undefined';\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function supportsProxies - Detects if execution environment supports proxy objects\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'supportsProxies',\n\t\t    value: function supportsProxies() {\n\t\t      return typeof Proxy !== 'undefined';\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'selectHamsterWheel',\n\t\t    value: function selectHamsterWheel() {\n\t\t      if (this.isIE10) {\n\t\t        return './common/hamstersWheel.js';\n\t\t      }\n\t\t      if (this.reactNative) {\n\t\t        return './common/rnHamstersWheel.js';\n\t\t      }\n\t\t      if (this.webWorker) {\n\t\t        return _wheel2.default.worker;\n\t\t      }\n\t\t      if (this.node) {\n\t\t        return _wheel2.default.regular;\n\t\t      }\n\t\t      return _data2.default.generateWorkerBlob(_wheel2.default.regular);\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return habitat;\n\t\t}();\n\t\t\n\t\tvar hamstersHabitat = new habitat();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersHabitat;\n\t\t}\n\t\n\t/***/ }),\n\t/* 4 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tvar _habitat = __webpack_require__(3);\n\t\t\n\t\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\t\n\t\tvar _logger = __webpack_require__(5);\n\t\t\n\t\tvar _logger2 = _interopRequireDefault(_logger);\n\t\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar data = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function data() {\n\t\t    _classCallCheck(this, data);\n\t\t\n\t\t    this.randomArray = this.randomArray;\n\t\t    this.aggregateArrays = this.aggregateThreadOutputs;\n\t\t    this.splitArrays = this.splitArrayIntoSubArrays;\n\t\t    this.createBlob = this.createDataBlob;\n\t\t    this.generateWorkerBlob = this.generateWorkerBlob;\n\t\t    this.processDataType = this.processDataType;\n\t\t    this.sortOutput = this.sortArray;\n\t\t    this.getOutput = this.prepareOutput;\n\t\t    this.prepareJob = this.prepareFunction;\n\t\t    this.feedHamster = this.messageWorker;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function messageWorker - Prepares message to send to thread\n\t\t  * @param {worker} hamster - Thread to message\n\t\t  * @param {object} hamsterFood - Message to send to thread\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(data, [{\n\t\t    key: 'messageWorker',\n\t\t    value: function messageWorker(hamster, hamsterFood, habitat) {\n\t\t      if (habitat.reactNative) {\n\t\t        return hamster.postMessage(JSON.stringify(hamsterFood));\n\t\t      }\n\t\t      if (habitat.ie10) {\n\t\t        return hamster.postMessage(hamsterFood);\n\t\t      }\n\t\t      if (habitat.webWorker) {\n\t\t        return hamster.port.postMessage(hamsterFood);\n\t\t      }\n\t\t      return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, habitat.transferrable));\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n\t\t    * @param {object} hamsterFood - Message to send to thread\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'prepareTransferBuffers',\n\t\t    value: function prepareTransferBuffers(hamsterFood, transferrable) {\n\t\t      var buffers = [];\n\t\t      var key = null;\n\t\t      if (transferrable) {\n\t\t        var _iteratorNormalCompletion = true;\n\t\t        var _didIteratorError = false;\n\t\t        var _iteratorError = undefined;\n\t\t\n\t\t        try {\n\t\t          for (var _iterator = Object.keys(hamsterFood)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t            key = _step.value;\n\t\t\n\t\t            if (hamsterFood[key].buffer) {\n\t\t              buffers.push(hamsterFood[key].buffer);\n\t\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t\t            }\n\t\t          }\n\t\t        } catch (err) {\n\t\t          _didIteratorError = true;\n\t\t          _iteratorError = err;\n\t\t        } finally {\n\t\t          try {\n\t\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t\t              _iterator.return();\n\t\t            }\n\t\t          } finally {\n\t\t            if (_didIteratorError) {\n\t\t              throw _iteratorError;\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t      return buffers;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function prepareFunction - Prepares transferrable buffers for faster message passing\n\t\t    * @param {function} functionBody - Message to send to thread\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'prepareFunction',\n\t\t    value: function prepareFunction(functionBody) {\n\t\t      functionBody = String(functionBody);\n\t\t      if (!_habitat2.default.webWorker) {\n\t\t        var startingIndex = functionBody.indexOf(\"{\") + 1;\n\t\t        var endingIndex = functionBody.length - 1;\n\t\t        return functionBody.substring(startingIndex, endingIndex);\n\t\t      }\n\t\t      return functionBody;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n\t\t    * @param {function} workerLogic - Scaffold to use within worker thread\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'generateWorkerBlob',\n\t\t    value: function generateWorkerBlob(workerLogic) {\n\t\t      var hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n\t\t      var dataBlobURL = URL.createObjectURL(hamsterBlob);\n\t\t      return dataBlobURL;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function processDataType - Converts buffer into new typed array\n\t\t    * @param {string} dataType - Typed array type for this task\n\t\t    * @param {object} buffer - Buffer to convert\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'processDataType',\n\t\t    value: function processDataType(dataType, buffer, transferrable) {\n\t\t      if (transferrable) {\n\t\t        return this.typedArrayFromBuffer(dataType, buffer);\n\t\t      }\n\t\t      return buffer;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function prepareOutput - Prepares final task output\n\t\t    * @param {task} buffer - Task to prepare output for\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'prepareOutput',\n\t\t    value: function prepareOutput(task, transferrable) {\n\t\t      if (task.aggregate && task.threads !== 1) {\n\t\t        return this.aggregateThreadOutputs(task.output, task.dataType, transferrable);\n\t\t      }\n\t\t      return task.output;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function sortArray - Sorts array by defined order\n\t\t    * @param {object} arr - Array to sort\n\t\t    * @param {string} order - Defined sort order\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'sortArray',\n\t\t    value: function sortArray(arr, order) {\n\t\t      switch (order) {\n\t\t        case 'desc':\n\t\t        case 'asc':\n\t\t          return Array.prototype.sort.call(arr, function (a, b) {\n\t\t            return order === 'asc' ? a - b : b - a;\n\t\t          });\n\t\t        case 'ascAlpha':\n\t\t          return arr.sort();\n\t\t        case 'descAlpha':\n\t\t          return arr.reverse();\n\t\t        default:\n\t\t          return arr;\n\t\t      }\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function typedArrayFromBuffer - Converts buffer into new typed array\n\t\t    * @param {string} dataType - Typed array type for this task\n\t\t    * @param {object} buffer - Buffer to convert\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'typedArrayFromBuffer',\n\t\t    value: function typedArrayFromBuffer(dataType, buffer) {\n\t\t      var types = {\n\t\t        'uint32': Uint32Array,\n\t\t        'uint16': Uint16Array,\n\t\t        'uint8': Uint8Array,\n\t\t        'uint8clamped': Uint8ClampedArray,\n\t\t        'int32': Int32Array,\n\t\t        'int16': Int16Array,\n\t\t        'int8': Int8Array,\n\t\t        'float32': Float32Array,\n\t\t        'float64': Float64Array\n\t\t      };\n\t\t      if (!types[dataType]) {\n\t\t        return dataType;\n\t\t      }\n\t\t      return new types[dataType](buffer);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'locateBlobBuilder',\n\t\t    value: function locateBlobBuilder() {\n\t\t      if (typeof BlobBuilder !== 'undefined') {\n\t\t        return BlobBuilder;\n\t\t      }\n\t\t      if (typeof WebKitBlobBuilder !== 'undefined') {\n\t\t        return WebKitBlobBuilder;\n\t\t      }\n\t\t      if (typeof MozBlobBuilder !== 'undefined') {\n\t\t        return MozBlobBuilder;\n\t\t      }\n\t\t      if (typeof MSBlobBuilder !== 'undefined') {\n\t\t        return MSBlobBuilder;\n\t\t      }\n\t\t      return _logger2.default.error('Environment does not support data blobs!');\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function createDataBlob - Creates new data blob from textContent\n\t\t    * @param {string} textContent - Provided text content for blob\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'createDataBlob',\n\t\t    value: function createDataBlob(textContent) {\n\t\t      if (typeof Blob === 'undefined') {\n\t\t        var BlobMaker = this.locateBlobBuilder();\n\t\t        var blob = new BlobMaker();\n\t\t        blob.append([textContent], {\n\t\t          type: 'application/javascript'\n\t\t        });\n\t\t        return blob.getBlob();\n\t\t      }\n\t\t      return new Blob([textContent], {\n\t\t        type: 'application/javascript'\n\t\t      });\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function randomArray - Creates new random array\n\t\t    * @param {number} count - Number of random elements in array\n\t\t    * @param {function} onSuccess - onSuccess callback\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'randomArray',\n\t\t    value: function randomArray(count, onSuccess) {\n\t\t      var randomArray = [];\n\t\t      while (count > 0) {\n\t\t        randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n\t\t        count -= 1;\n\t\t      }\n\t\t      onSuccess(randomArray);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n\t\t    * @param {array} input - Array of arrays to aggregate\n\t\t    * @param {string} dataType - Data type to use for typed array\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'aggregateThreadOutputs',\n\t\t    value: function aggregateThreadOutputs(input, dataType, transferrable) {\n\t\t      if (!dataType || !transferrable) {\n\t\t        return input.reduce(function (a, b) {\n\t\t          return a.concat(b);\n\t\t        });\n\t\t      }\n\t\t      var i = 0;\n\t\t      var len = input.length;\n\t\t      var bufferLength = 0;\n\t\t      for (i; i < len; i += 1) {\n\t\t        bufferLength += input[i].length;\n\t\t      }\n\t\t      var output = this.processDataType(dataType, bufferLength, transferrable);\n\t\t      var offset = 0;\n\t\t      for (i = 0; i < len; i += 1) {\n\t\t        output.set(input[i], offset);\n\t\t        offset += input[i].length;\n\t\t      }\n\t\t      return output;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n\t\t    * @param {array} array - Array to split\n\t\t    * @param {number} n - Number of subarrays to create\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'splitArrayIntoSubArrays',\n\t\t    value: function splitArrayIntoSubArrays(array, n) {\n\t\t      var i = 0;\n\t\t      var threadArrays = [];\n\t\t      var size = Math.ceil(array.length / n);\n\t\t      if (array.slice) {\n\t\t        while (i < array.length) {\n\t\t          threadArrays.push(array.slice(i, i += size));\n\t\t        }\n\t\t      } else {\n\t\t        while (i < array.length) {\n\t\t          threadArrays.push(array.subarray(i, i += size));\n\t\t        }\n\t\t      }\n\t\t      return threadArrays;\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return data;\n\t\t}();\n\t\t\n\t\tvar hamstersData = new data();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersData;\n\t\t}\n\t\n\t/***/ }),\n\t/* 5 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tvar _version = __webpack_require__(2);\n\t\t\n\t\tvar _version2 = _interopRequireDefault(_version);\n\t\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar logger = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function logger() {\n\t\t    _classCallCheck(this, logger);\n\t\t\n\t\t    this.logBook = {\n\t\t      error: [],\n\t\t      warning: [],\n\t\t      info: []\n\t\t    };\n\t\t    this.info = this.infoLog;\n\t\t    this.warning = this.warningLog;\n\t\t    this.error = this.errorLog;\n\t\t    this.errorFromThread = this.errorFromThread;\n\t\t    this.saveLogEntry = this.saveToLogBook;\n\t\t    this.getLogEntries = this.fetchLogBook;\n\t\t    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n\t\t    this.searchLogEntries = this.searchLogBook;\n\t\t  }\n\t\t\n\t\t  _createClass(logger, [{\n\t\t    key: 'infoLog',\n\t\t    value: function infoLog(message) {\n\t\t      var timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n\t\t      console.info(timeStampedMessage);\n\t\t    }\n\t\t  }, {\n\t\t    key: 'warningLog',\n\t\t    value: function warningLog(message) {\n\t\t      var timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n\t\t      console.warn(timeStampedMessage);\n\t\t    }\n\t\t  }, {\n\t\t    key: 'errorLog',\n\t\t    value: function errorLog(message, reject) {\n\t\t      var timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n\t\t      console.error(timeStampedMessage);\n\t\t      if (reject) {\n\t\t        reject(timeStampedMessage);\n\t\t      } else {\n\t\t        return timeStampedMessage;\n\t\t      }\n\t\t    }\n\t\t  }, {\n\t\t    key: 'generateTimeStampedMessage',\n\t\t    value: function generateTimeStampedMessage(type, message) {\n\t\t      var record = 'Hamsters.js v' + _version2.default + ' ' + type + ': ' + message + ' @ ' + Date.now();\n\t\t      this.saveLogEntry(type.toLowerCase(), record);\n\t\t      return record;\n\t\t    }\n\t\t  }, {\n\t\t    key: 'errorFromThread',\n\t\t    value: function errorFromThread(error, reject) {\n\t\t      var errorMessage = '#' + error.lineno + ' in ' + error.filename + ': ' + error.message;\n\t\t      this.errorLog(errorMessage, reject);\n\t\t    }\n\t\t  }, {\n\t\t    key: 'saveToLogBook',\n\t\t    value: function saveToLogBook(eventType, message) {\n\t\t      this.logBook[eventType].push(message);\n\t\t    }\n\t\t  }, {\n\t\t    key: 'fetchLogBook',\n\t\t    value: function fetchLogBook(eventType) {\n\t\t      if (eventType) {\n\t\t        return this.logBook[eventType];\n\t\t      }\n\t\t      return this.logBook;\n\t\t    }\n\t\t  }, {\n\t\t    key: 'findStringInLogBook',\n\t\t    value: function findStringInLogBook(logBookEntries, searchString) {\n\t\t      var searchResults = [];\n\t\t      var i = 0;\n\t\t      for (i; i < logBookEntries.length; i++) {\n\t\t        if (logBookEntries[i].indexOf(searchString) !== -1) {\n\t\t          searchResults.push(logBookEntries[i]);\n\t\t        }\n\t\t      }\n\t\t      return searchResults;\n\t\t    }\n\t\t  }, {\n\t\t    key: 'findStringInLogBookAllTypes',\n\t\t    value: function findStringInLogBookAllTypes(logBook, searchString) {\n\t\t      var searchResults = [];\n\t\t      var key = void 0,\n\t\t          eventTypeResults = void 0,\n\t\t          tmpEntries = null;\n\t\t      for (key in logBook) {\n\t\t        if (logBook.hasOwnProperty(key)) {\n\t\t          tmpEntries = logBook[key];\n\t\t          eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n\t\t          for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n\t\t            searchResults.push(eventTypeResults[i]);\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t      return searchResults;\n\t\t    }\n\t\t  }, {\n\t\t    key: 'searchLogBook',\n\t\t    value: function searchLogBook(searchString, eventType) {\n\t\t      var finalResults = [];\n\t\t      if (eventType) {\n\t\t        finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n\t\t      } else {\n\t\t        finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n\t\t      }\n\t\t      return {\n\t\t        total: finalResults.length,\n\t\t        results: finalResults\n\t\t      };\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return logger;\n\t\t}();\n\t\t\n\t\tvar hamstersLogger = new logger();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersLogger;\n\t\t}\n\t\n\t/***/ }),\n\t/* 6 */\n\t/***/ (function(module, exports) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar wheel = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function wheel() {\n\t\t    _classCallCheck(this, wheel);\n\t\t\n\t\t    this.worker = this.workerScaffold;\n\t\t    this.regular = this.regularScaffold;\n\t\t    this.legacy = this.legacyScaffold;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(wheel, [{\n\t\t    key: 'workerScaffold',\n\t\t    value: function workerScaffold() {\n\t\t      'use strict';\n\t\t\n\t\t      if (typeof self === 'undefined') {\n\t\t        self = global || window || this;\n\t\t      }\n\t\t\n\t\t      self.params = {};\n\t\t      self.rtn = {};\n\t\t\n\t\t      addEventListener('connect', function (incomingConnection) {\n\t\t        var port = incomingConnection.ports[0];\n\t\t        port.start();\n\t\t        port.addEventListener('message', function (incomingMessage) {\n\t\t          params = incomingMessage.data;\n\t\t          rtn = {\n\t\t            data: [],\n\t\t            dataType: params.dataType\n\t\t          };\n\t\t          if (params.importScripts) {\n\t\t            self.importScripts(params.importScripts);\n\t\t          }\n\t\t          eval(\"(\" + params.hamstersJob + \")\")();\n\t\t          port.postMessage(rtn);\n\t\t        }, false);\n\t\t      }, false);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function workerScaffold - Provides worker body for library functionality\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'regularScaffold',\n\t\t    value: function regularScaffold() {\n\t\t      'use strict';\n\t\t\n\t\t      if (typeof self === 'undefined') {\n\t\t        var _self = global || window || this;\n\t\t      }\n\t\t\n\t\t      self.params = {};\n\t\t      self.rtn = {};\n\t\t\n\t\t      function prepareReturn(returnObject) {\n\t\t        var dataType = returnObject.dataType;\n\t\t        if (dataType) {\n\t\t          returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n\t\t        }\n\t\t        return returnObject;\n\t\t      }\n\t\t\n\t\t      function typedArrayFromBuffer(dataType, buffer) {\n\t\t        var types = {\n\t\t          'uint32': Uint32Array,\n\t\t          'uint16': Uint16Array,\n\t\t          'uint8': Uint8Array,\n\t\t          'uint8clamped': Uint8ClampedArray,\n\t\t          'int32': Int32Array,\n\t\t          'int16': Int16Array,\n\t\t          'int8': Int8Array,\n\t\t          'float32': Float32Array,\n\t\t          'float64': Float64Array\n\t\t        };\n\t\t        if (!types[dataType]) {\n\t\t          return buffer;\n\t\t        }\n\t\t        return new types[dataType](buffer);\n\t\t      }\n\t\t\n\t\t      function prepareTransferBuffers(hamsterFood) {\n\t\t        var buffers = [];\n\t\t        var key = null;\n\t\t        for (key in hamsterFood) {\n\t\t          if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n\t\t            if (hamsterFood[key].buffer) {\n\t\t              buffers.push(hamsterFood[key].buffer);\n\t\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t\t            }\n\t\t          }\n\t\t        }\n\t\t        return buffers;\n\t\t      }\n\t\t\n\t\t      self.onmessage = function (incomingMessage) {\n\t\t        params = incomingMessage.data;\n\t\t        rtn = {\n\t\t          data: [],\n\t\t          dataType: params.dataType ? params.dataType.toLowerCase() : null\n\t\t        };\n\t\t        if (params.importScripts) {\n\t\t          self.importScripts(params.importScripts);\n\t\t        }\n\t\t        new Function(params.hamstersJob)();\n\t\t        postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n\t\t      };\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function legacyScaffold - Provides library functionality for legacy devices\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'legacyScaffold',\n\t\t    value: function legacyScaffold(params, resolve) {\n\t\t      var _this = this;\n\t\t\n\t\t      setTimeout(function () {\n\t\t        if (typeof self === 'undefined') {\n\t\t          var self = global || window || _this;\n\t\t        }\n\t\t        self.params = params;\n\t\t        self.rtn = {\n\t\t          data: []\n\t\t        };\n\t\t        params.hamstersJob();\n\t\t        resolve(rtn);\n\t\t      }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return wheel;\n\t\t}();\n\t\t\n\t\t;\n\t\t\n\t\tvar hamstersWheel = new wheel();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersWheel;\n\t\t}\n\t\n\t/***/ }),\n\t/* 7 */\n\t/***/ (function(module, exports, __webpack_require__) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tvar _data = __webpack_require__(4);\n\t\t\n\t\tvar _data2 = _interopRequireDefault(_data);\n\t\t\n\t\tvar _habitat = __webpack_require__(3);\n\t\t\n\t\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\t\n\t\tvar _logger = __webpack_require__(5);\n\t\t\n\t\tvar _logger2 = _interopRequireDefault(_logger);\n\t\t\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar pool = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function pool() {\n\t\t    _classCallCheck(this, pool);\n\t\t\n\t\t    this.tasks = [];\n\t\t    this.threads = [];\n\t\t    this.running = [];\n\t\t    this.pending = [];\n\t\t    this.fetchHamster = this.grabHamster;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function grabHamster - Adds task to queue waiting for available thread\n\t\t  * @param {object} array - Provided data to execute logic on\n\t\t  * @param {object} task - Provided library functionality options for this task\n\t\t  * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t  * @param {function} wheel - Results from select hamster wheel\n\t\t  * @param {function} resolve - onSuccess method\n\t\t  * @param {function} reject - onError method\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(pool, [{\n\t\t    key: 'addWorkToPending',\n\t\t    value: function addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n\t\t      this.pending.push(arguments);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function grabHamster - Invokes processing of next item in queue\n\t\t    * @param {object} item - Task to process\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'processQueue',\n\t\t    value: function processQueue(item, hamster) {\n\t\t      return this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function grabHamster - Keeps track of threads running, scoped globally and to task\n\t\t    * @param {number} threadId - Id of thread\n\t\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t    * @param {function} wheel - Results from select hamster wheel\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'grabHamster',\n\t\t    value: function grabHamster(threadId, habitat) {\n\t\t      if (habitat.persistence) {\n\t\t        return this.threads[threadId];\n\t\t      }\n\t\t      return this.spawnHamster();\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {number} id - Id of thread to track\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'keepTrackOfThread',\n\t\t    value: function keepTrackOfThread(task, id) {\n\t\t      task.workers.push(id); //Keep track of threads scoped to current task\n\t\t      this.running.push(id); //Keep track of all currently running threads\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function registerTask - Adds task to execution pool based on id\n\t\t    * @param {number} id - Id of task to register\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'registerTask',\n\t\t    value: function registerTask(id) {\n\t\t      this.tasks.push(id);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function spawnHamsters - Spawns multiple new threads for execution\n\t\t    * @param {function} wheel - Results from select hamster wheel\n\t\t    * @param {number} maxThreds - Max number of threads for this client\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'spawnHamsters',\n\t\t    value: function spawnHamsters(maxThreads) {\n\t\t      for (maxThreads; maxThreads > 0; maxThreads--) {\n\t\t        this.threads.push(this.spawnHamster());\n\t\t      }\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function spawnHamster - Spawns a new thread for execution\n\t\t    * @return {object} WebWorker - New WebWorker thread using selected scaffold\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'spawnHamster',\n\t\t    value: function spawnHamster() {\n\t\t      var newWheel = _habitat2.default.selectHamsterWheel();\n\t\t      if (_habitat2.default.webWorker) {\n\t\t        return new _habitat2.default.SharedWorker(newWheel, 'SharedHamsterWheel');\n\t\t      }\n\t\t      return new _habitat2.default.Worker(newWheel);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function prepareMeal - Prepares message to send to a thread and invoke execution\n\t\t    * @param {object} threadArray - Provided data to execute logic on\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @return {object} hamsterFood - Prepared message to send to a thread\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'prepareMeal',\n\t\t    value: function prepareMeal(threadArray, task) {\n\t\t      var hamsterFood = {\n\t\t        array: threadArray\n\t\t      };\n\t\t      for (var key in task.input) {\n\t\t        if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n\t\t          hamsterFood[key] = task.input[key];\n\t\t        }\n\t\t      }\n\t\t      return hamsterFood;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function hamsterWheel - Runs function using thread\n\t\t    * @param {object} array - Provided data to execute logic on\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t    * @param {function} wheel - Results from select hamster wheel\n\t\t    * @param {function} resolve - onSuccess method\n\t\t    * @param {function} reject - onError method\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'runTask',\n\t\t    value: function runTask(hamster, array, task, scope, resolve, reject) {\n\t\t      var threadId = this.running.length;\n\t\t      var hamsterFood = this.prepareMeal(array, task);\n\t\t      this.registerTask(task.id);\n\t\t      this.keepTrackOfThread(task, threadId);\n\t\t      if (scope.habitat.legacy) {\n\t\t        scope.habitat.legacyWheel(hamsterFood, resolve, reject);\n\t\t      } else {\n\t\t        this.trainHamster(task.count, task, hamster, scope, resolve, reject);\n\t\t        scope.data.feedHamster(hamster, hamsterFood, scope.habitat);\n\t\t      }\n\t\t      task.count += 1; //Increment count, thread is running\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function hamsterWheel - Runs or queues function using threads\n\t\t    * @param {object} array - Provided library functionality options for this task\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t    * @param {function} wheel - Results from select hamster wheel\n\t\t    * @param {function} resolve - onSuccess method\n\t\t    * @param {function} reject - onError method\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'hamsterWheel',\n\t\t    value: function hamsterWheel(array, task, scope, resolve, reject) {\n\t\t      if (scope.maxThreads === this.running.length) {\n\t\t        return this.addWorkToPending(array, task, scope, resolve, reject);\n\t\t      }\n\t\t      var hamster = this.grabHamster(this.running.length, scope.habitat);\n\t\t      return this.runTask(hamster, array, task, scope, resolve, reject);\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {function} resolve - onSuccess method\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'returnOutputAndRemoveTask',\n\t\t    value: function returnOutputAndRemoveTask(task, resolve) {\n\t\t      var output = _data2.default.getOutput(task, _habitat2.default.transferrable);\n\t\t      if (task.sort) {\n\t\t        output = _data2.default.sortOutput(output, task.sort);\n\t\t      }\n\t\t      this.tasks[task.id] = null; //Clean up our task, not needed any longer\n\t\t      resolve({\n\t\t        data: output\n\t\t      });\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function trainHamster - Trains thread in how to behave\n\t\t    * @param {number} threadId - Internal use id for this thread\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {worker} hamster - Thread to train\n\t\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t    * @param {function} resolve - onSuccess method\n\t\t    * @param {function} reject - onError method\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'trainHamster',\n\t\t    value: function trainHamster(threadId, task, hamster, scope, resolve, reject) {\n\t\t      var pool = this;\n\t\t      // Handle successful response from a thread\n\t\t      function onThreadResponse(message) {\n\t\t        var results = message.data;\n\t\t        pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n\t\t        task.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n\t\t        // String only communcation for rn...in 2k18\n\t\t        if (scope.habitat.reactNative) {\n\t\t          task.output[threadId] = JSON.parse(results.data);\n\t\t        } else {\n\t\t          task.output[threadId] = results.data;\n\t\t        }\n\t\t        if (task.workers.length === 0 && task.count === task.threads) {\n\t\t          pool.returnOutputAndRemoveTask(task, resolve);\n\t\t        }\n\t\t        if (pool.pending.length !== 0) {\n\t\t          pool.processQueue(pool.pending.shift(), hamster);\n\t\t        } else if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n\t\t          hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n\t\t        }\n\t\t      }\n\t\t      // Handle error response from a thread\n\t\t      function onThreadError(error) {\n\t\t        _logger2.default.errorFromThread(error, reject);\n\t\t      }\n\t\t      // Register on message/error handlers\n\t\t      if (_habitat2.default.webWorker) {\n\t\t        hamster.port.onmessage = onThreadResponse;\n\t\t        hamster.port.onmessageerror = onThreadError;\n\t\t        hamster.port.onerror = onThreadError;\n\t\t      } else {\n\t\t        hamster.onmessage = onThreadResponse;\n\t\t        hamster.onmessageerror = onThreadError;\n\t\t        hamster.onerror = onThreadError;\n\t\t      }\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function scheduleTask - Adds new task to the system for execution\n\t\t    * @param {object} task - Provided library functionality options for this task\n\t\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t\t    * @param {function} wheel - Scaffold to execute login within\n\t\t    * @param {number} maxThreads - Maximum number of threads for this client\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'scheduleTask',\n\t\t    value: function scheduleTask(task, scope) {\n\t\t      var _this = this;\n\t\t\n\t\t      return new Promise(function (resolve, reject) {\n\t\t        var threadArrays = [];\n\t\t        if (task.input.array && task.threads !== 1) {\n\t\t          threadArrays = scope.data.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t\t        }\n\t\t        var i = 0;\n\t\t        while (i < task.threads) {\n\t\t          if (threadArrays && task.threads !== 1) {\n\t\t            _this.hamsterWheel(threadArrays[i], task, scope, resolve, reject);\n\t\t          } else {\n\t\t            _this.hamsterWheel(task.input.array, task, scope, resolve, reject);\n\t\t          }\n\t\t          i += 1;\n\t\t        }\n\t\t      });\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return pool;\n\t\t}();\n\t\t\n\t\tvar hamsterPool = new pool();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamsterPool;\n\t\t}\n\t\n\t/***/ }),\n\t/* 8 */\n\t/***/ (function(module, exports) {\n\t\n\t\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\t\n\t\t/***********************************************************************************\n\t\t* Title: Hamsters.js                                                               *\n\t\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t\t* Author: Austin K. Smith                                                          *\n\t\t* Contact: austin@asmithdev.com                                                    *  \n\t\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t\t* License: Artistic License 2.0                                                    *\n\t\t***********************************************************************************/\n\t\t\n\t\t'use strict';\n\t\t\n\t\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\t\n\t\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\t\n\t\tvar memoizer = function () {\n\t\t\n\t\t  /**\n\t\t  * @constructor\n\t\t  * @function constructor - Sets properties for this class\n\t\t  */\n\t\t  function memoizer() {\n\t\t    _classCallCheck(this, memoizer);\n\t\t\n\t\t    this.maxCacheEntries = 25;\n\t\t    this.cacheEntries = [];\n\t\t    this.itemCached = this.isItemCached;\n\t\t    this.fetchItem = this.fetchItemFromCache;\n\t\t    this.saveItem = this.saveItemToCache;\n\t\t  }\n\t\t\n\t\t  /**\n\t\t  * @function isItemCached - Checks for existing data in cache\n\t\t  * @param {object} input - Provided library execution options\n\t\t  * @param {method} functionToRun - Function to execute\n\t\t  * @return {object} Execution results from cache, or false\n\t\t  */\n\t\t\n\t\t\n\t\t  _createClass(memoizer, [{\n\t\t    key: 'isItemCached',\n\t\t    value: function isItemCached(input, method) {\n\t\t      return !!this.fetchItem({ fn: method, data: input }) || false;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function fetchItemFromCache - Fetches cache item from cache\n\t\t    * @param {object} cacheItem - Cache item to fetch\n\t\t    * @return {object} CacheResults, or false\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'fetchItemFromCache',\n\t\t    value: function fetchItemFromCache(cacheItem) {\n\t\t      var cachedResult = null;\n\t\t      var key = null;\n\t\t      var _iteratorNormalCompletion = true;\n\t\t      var _didIteratorError = false;\n\t\t      var _iteratorError = undefined;\n\t\t\n\t\t      try {\n\t\t        for (var _iterator = Object.keys(this.cacheEntries)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t          key = _step.value;\n\t\t\n\t\t          if (cacheItem[key].fn === cacheItem.fn && cacheItem[key].input === cacheItem.data) {\n\t\t            cachedResult = cacheItem[key].input;\n\t\t          }\n\t\t        }\n\t\t      } catch (err) {\n\t\t        _didIteratorError = true;\n\t\t        _iteratorError = err;\n\t\t      } finally {\n\t\t        try {\n\t\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t\t            _iterator.return();\n\t\t          }\n\t\t        } finally {\n\t\t          if (_didIteratorError) {\n\t\t            throw _iteratorError;\n\t\t          }\n\t\t        }\n\t\t      }\n\t\t\n\t\t      return cachedResult || false;\n\t\t    }\n\t\t\n\t\t    /**\n\t\t    * @function isItemCached - Checks for existing data in cache\n\t\t    * @param {method} functionToRun - Function to execute\n\t\t    * @param {object} data - Execution results to cache\n\t\t    */\n\t\t\n\t\t  }, {\n\t\t    key: 'saveItemToCache',\n\t\t    value: function saveItemToCache(method, data, maxCacheEntries) {\n\t\t      var itemToCache = {\n\t\t        fn: method,\n\t\t        input: data\n\t\t      };\n\t\t      var cachedItems = this.cacheEntries;\n\t\t      if (cachedItems.length < maxCacheEntries) {\n\t\t        cachedItems.push(itemToCache);\n\t\t      } else {\n\t\t        cachedItems.splice(0, 0, itemToCache);\n\t\t      }\n\t\t      this.cacheEntries = cachedItems;\n\t\t    }\n\t\t  }]);\n\t\t\n\t\t  return memoizer;\n\t\t}();\n\t\t\n\t\tvar hamstersMemoizer = new memoizer();\n\t\t\n\t\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\t  module.exports = hamstersMemoizer;\n\t\t}\n\t\n\t/***/ })\n\t/******/ ]);\n\t//# sourceMappingURL=hamsters.node.min.js.map\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// lzwFlossRedux.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 435ab12082ae4dfa0198","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: lzwFlossRedux                                                             *\n* Description: 100% Vanilla Javascript Multithreaded LZW Compression Library       *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass lzwFlossReduxjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = '1.0.1';\n    this.encode = this.lzwEncode;\n    this.decode = this.lzwDecode;\n  }\n\n  /**\n  * @description: Generates a thread and lzw encodes the supplied string\n  * @method encode\n  * @param {string} inputString\n  * @param {function} onSuccess\n  */\n  lzwEncode(inputString) {\n    return new Promise((resolve, reject) => {\n      this.run(inputString, this.encodeString, resolve, reject, false);\n    });\n  }\n\n  /**\n  * @description: Generates a thread and decodes the supplied lzw encoded string\n  * @method decode\n  * @param {string} inputString\n  * @param {function} onSuccess\n  */\n  lzwDecode(inputString) {\n    return new Promise((resolve, reject) => {\n      this.run(inputString, this.decodeString, resolve, reject, true);\n    });\n  }\n\n  /**\n  * @description: Abstracts hamsters usage for reusability\n  * @method run\n  * @param {string} inputString\n  * @param {function} encodeOrDecode\n  * @param {function} onSuccess\n  */\n  run(inputString, fn, onSuccess, onError, decode) {\n    var _inputString = inputString;\n    if(decode === false) {\n      _inputString = unescape(encodeURIComponent(inputString));\n    }\n    var stringArray = this.splitString(_inputString);\n    var params = {\n      array: stringArray\n    }\n    hamsters.promise(params, fn).then((output) => {\n      var _output = output.data[0];\n      if(decode === true) {\n        _output = decodeURIComponent(escape(_output));\n      }\n      onSuccess(_output);\n    }).catch((error) => {\n      onError(error);\n    });\n  }\n\n  /**\n  * @description: Splits a string into a charcode array\n  * @method splitString\n  * @param {string} inputString\n  */\n  splitString(inputString) {\n    var inputArray = (inputString + \"\").split(\"\");\n    var outputArray = [];\n    for (var i = 0; i < inputArray.length; i++) {\n      outputArray.push(inputArray[i].charCodeAt(0));\n    }\n    return outputArray;\n  }\n\n  /**\n  * @description: Function to be executed within a thread to encode a string\n  * @method encodeString\n  * @param {params} Object\n  */\n  encodeString() {\n    var returnCharacterCode = function(phrase) {\n      if(phrase.length > 1) {\n        return dictionary[phrase];\n      }\n      return phrase.charCodeAt(0);\n    };\n    var stringArray = [];\n    var n = 0;\n    for (n; n < params.array.length; n++) {\n      stringArray[n] = String.fromCharCode(params.array[n]);\n    }\n    var currentCharacter;\n    var output = [];\n    var dictionary = {};\n    var code = 256;\n    var phrase = stringArray[0];\n    var phrasePlusChar;\n    var i = 1;\n    for (i; i < stringArray.length; i++) {\n      currentCharacter = stringArray[i];\n      phrasePlusChar = dictionary[phrase + currentCharacter];\n      if (phrasePlusChar) {\n        phrase += currentCharacter;\n      } else {\n        output.push(returnCharacterCode(phrase));\n        dictionary[phrase + currentCharacter] = code;\n        code++;\n        phrase = currentCharacter;\n      }\n    }\n    output.push(returnCharacterCode(phrase));\n    for (i = 0; i < output.length; i++) {\n      rtn.data[i] = String.fromCharCode(output[i]);\n    }\n    rtn.data = rtn.data.join(\"\");\n  }\n\n  /**\n  * @description: Function to be executed within a thread to decode an already encoded string\n  * @method decodeString\n  * @param {params} Object\n  */\n  decodeString() {\n    var returnPhrase = function(currentCode, oldPhrase, currentCharacter) {\n      if(typeof dictionary[currentCode] !== 'undefined') {\n        return dictionary[currentCode];\n      }\n      return (oldPhrase + currentCharacter);\n    };\n    var stringArray = [];\n    var n = 0;\n    for (n; n < params.array.length; n++) {\n      stringArray[n] = String.fromCharCode(params.array[n]);\n    }\n    var currentCharacter = stringArray[0];\n    var oldPhrase = currentCharacter;\n    var code = 256;\n    var currentCode;\n    var currentPhrase;\n    var dictionary = {};\n    rtn.data.push(currentCharacter);\n    for (var i = 1; i < stringArray.length; i++) {\n      currentCode = params.array[i];\n      if (currentCode < 256) {\n        currentPhrase = stringArray[i];\n      } else {\n        currentPhrase = returnPhrase(currentCode, oldPhrase, currentCharacter);\n      }\n      rtn.data.push(currentPhrase);\n      currentCharacter = currentPhrase.charAt(0);\n      dictionary[code] = (oldPhrase + currentCharacter);\n      oldPhrase = currentPhrase;\n      code++;\n    }\n    rtn.data = rtn.data.join(\"\");\n  }\n\n}\n\nvar lzwFlossRedux = new lzwFlossReduxjs();\n\nif(typeof require !== 'undefined') {\n  var hamsters = require('hamsters.js');\n}\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = lzwFlossRedux;\n}\n\n\n// WEBPACK FOOTER //\n// ./lzwFlossRedux.js","module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _version = __webpack_require__(2);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tvar _habitat = __webpack_require__(3);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _pool = __webpack_require__(7);\n\t\n\tvar _pool2 = _interopRequireDefault(_pool);\n\t\n\tvar _data = __webpack_require__(4);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _logger = __webpack_require__(5);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tvar _memoizer = __webpack_require__(8);\n\t\n\tvar _memoizer2 = _interopRequireDefault(_memoizer);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar hamstersjs = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function hamstersjs() {\n\t    _classCallCheck(this, hamstersjs);\n\t\n\t    this.version = _version2.default;\n\t    this.maxThreads = _habitat2.default.logicalThreads;\n\t    this.habitat = _habitat2.default;\n\t    this.data = _data2.default;\n\t    this.pool = _pool2.default;\n\t    this.logger = _logger2.default;\n\t    this.memoizer = _memoizer2.default;\n\t    this.run = this.hamstersRun;\n\t    this.promise = this.hamstersPromise;\n\t    this.init = this.initializeLibrary;\n\t  }\n\t\n\t  /**\n\t  * @function initializeLibrary - Prepares & initializes Hamsters.js library\n\t  * @param {object} startOptions - Provided library functionality options\n\t  */\n\t\n\t\n\t  _createClass(hamstersjs, [{\n\t    key: 'initializeLibrary',\n\t    value: function initializeLibrary(startOptions) {\n\t      if (typeof startOptions !== 'undefined') {\n\t        this.processStartOptions(startOptions);\n\t      }\n\t      if (!this.habitat.legacy && this.habitat.persistence === true) {\n\t        _pool2.default.spawnHamsters(this.maxThreads);\n\t      }\n\t      this.logger.info('Hamsters.js v' + this.version + ' initialized using up to ' + this.maxThreads + ' threads.');\n\t      delete this.init;\n\t    }\n\t\n\t    /**\n\t    * @function processStartOptions - Adjusts library functionality based on provided options\n\t    * @param {object} startOptions - Provided library functionality options\n\t    */\n\t\n\t  }, {\n\t    key: 'processStartOptions',\n\t    value: function processStartOptions(startOptions) {\n\t      // Add options to override library environment behavior\n\t      var habitatKeys = ['worker', 'sharedworker', 'legacy', 'webworker', 'reactnative', 'atomics', 'proxies', 'transferrable', 'browser', 'shell', 'node', 'debug', 'persistence', 'importscripts'];\n\t      var key = null;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(startOptions)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          key = _step.value;\n\t\n\t          if (habitatKeys.indexOf(key.toLowerCase()) !== -1) {\n\t            this.habitat[key] = startOptions[key];\n\t          } else {\n\t            this[key] = startOptions[key];\n\t          }\n\t        }\n\t        // Ensure legacy mode is disabled when we pass a third party worker library\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      if (typeof this.habitat.Worker === 'function' && startOptions['legacy'] !== true) {\n\t        this.habitat.legacy = false;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @constructor\n\t    * @function hamstersTask - Constructs a new task object from provided arguments\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {object} scope - Reference to main library context\n\t    * @return {object} new Hamsters.js task\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersTask',\n\t    value: function hamstersTask(params, functionToRun, scope) {\n\t      this.id = scope.pool.tasks.length;\n\t      this.count = 0;\n\t      this.aggregate = params.aggregate || false;\n\t      this.output = [];\n\t      this.workers = [];\n\t      this.memoize = params.memoize || false;\n\t      this.dataType = params.dataType ? params.dataType.toLowerCase() : null;\n\t      this.input = params;\n\t      // Do not modify function if we're running on the main thread for legacy fallback\n\t      if (scope.habitat.legacy) {\n\t        this.threads = 1;\n\t        this.input.hamstersJob = functionToRun;\n\t      } else {\n\t        this.threads = params.threads || 1;\n\t        this.input.hamstersJob = scope.data.prepareJob(functionToRun);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'scheduleTask',\n\t    value: function scheduleTask(task, resolve, reject) {\n\t      this.pool.scheduleTask(task, this).then(function (results) {\n\t        return resolve(results);\n\t      }).catch(function (error) {\n\t        return _logger2.default.error(error.messsage, reject);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersPromise - Calls library functionality using async promises\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersPromise',\n\t    value: function hamstersPromise(params, functionToRun) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var task = new _this.hamstersTask(params, functionToRun, _this);\n\t        _this.scheduleTask(task, resolve, reject);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @async\n\t    * @function hamstersRun - Calls library functionality using async callbacks\n\t    * @param {object} params - Provided library execution options\n\t    * @param {function} functionToRun - Function to execute\n\t    * @param {function} onSuccess - Function to call upon successful execution\n\t    * @param {function} onError - Function to call upon execution failure\n\t    * @return {array} Results from functionToRun.\n\t    */\n\t\n\t  }, {\n\t    key: 'hamstersRun',\n\t    value: function hamstersRun(params, functionToRun, onSuccess, onError) {\n\t      var task = new this.hamstersTask(params, functionToRun, this);\n\t      this.scheduleTask(task, onSuccess, onError);\n\t    }\n\t  }]);\n\t\n\t  return hamstersjs;\n\t}();\n\t\n\tvar hamsters = new hamstersjs();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsters;\n\t}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar majorVersion = 5;\n\tvar minorVersion = 1;\n\tvar patchVersion = 2;\n\tvar hamstersVersion = majorVersion + '.' + minorVersion + '.' + patchVersion;\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersVersion;\n\t}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _data = __webpack_require__(4);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _wheel = __webpack_require__(6);\n\t\n\tvar _wheel2 = _interopRequireDefault(_wheel);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar habitat = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function habitat() {\n\t    _classCallCheck(this, habitat);\n\t\n\t    this.debug = false;\n\t    this.importScripts = null;\n\t    this.memoize = false;\n\t    this.persistence = true;\n\t    this.legacy = this.isLegacyEnvironment();\n\t    this.legacyWheel = _wheel2.default.legacy, this.browser = this.isBrowser();\n\t    this.webWorker = this.isWebWorker();\n\t    this.node = this.isNode();\n\t    this.reactNative = this.isReactNative();\n\t    this.shell = this.isShell();\n\t    this.transferrable = this.supportsTransferrableObjects();\n\t    this.atomics = this.supportsAtomicOperations();\n\t    this.proxies = this.supportsProxies();\n\t    this.isIE10 = !this.isNode() && !this.isReactNative() && this.isInternetExplorer(10);\n\t    this.logicalThreads = this.determineGlobalThreads();\n\t    this.Worker = this.locateWorkerObject();\n\t    this.sharedWorker = this.locateSharedWorkerObject();\n\t    this.selectHamsterWheel = this.selectHamsterWheel;\n\t  }\n\t\n\t  /**\n\t  * @function determineGlobalThreads - Determines max number of threads to use\n\t  */\n\t\n\t\n\t  _createClass(habitat, [{\n\t    key: 'determineGlobalThreads',\n\t    value: function determineGlobalThreads() {\n\t      var max = 4;\n\t      if (typeof navigator !== 'undefined') {\n\t        if (typeof navigator.hardwareConcurrency !== 'undefined') {\n\t          max = navigator.hardwareConcurrency;\n\t        }\n\t        if (max > 20 && navigator.userAgent.toLowerCase().indexOf('firefox') !== -1) {\n\t          max = 20;\n\t        }\n\t      }\n\t      if (this.node && typeof os !== 'undefined') {\n\t        max = os.cpus().length;\n\t      }\n\t      return max;\n\t    }\n\t\n\t    /**\n\t    * @function locateWorkerObject - Attempts to find a global Worker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateWorkerObject',\n\t    value: function locateWorkerObject() {\n\t      return typeof Worker !== 'undefined' ? Worker : false;\n\t    }\n\t\n\t    /**\n\t    * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n\t    */\n\t\n\t  }, {\n\t    key: 'locateSharedWorkerObject',\n\t    value: function locateSharedWorkerObject() {\n\t      return typeof SharedWorker !== 'undefined' ? SharedWorker : false;\n\t    }\n\t\n\t    /**\n\t    * @function isBrowser - Detects if execution environment is a browser\n\t    */\n\t\n\t  }, {\n\t    key: 'isBrowser',\n\t    value: function isBrowser() {\n\t      return (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === \"object\";\n\t    }\n\t\n\t    /**\n\t    * @function isInternetExplorer - Detects if execution environment is internet explorer\n\t    */\n\t\n\t  }, {\n\t    key: 'isInternetExplorer',\n\t    value: function isInternetExplorer(version) {\n\t      return new RegExp('msie' + (!isNaN(version) ? '\\\\s' + version : ''), 'i').test(navigator.userAgent);\n\t    }\n\t\n\t    /**\n\t    * @function isNode - Detects if execution environment is node.js\n\t    */\n\t\n\t  }, {\n\t    key: 'isNode',\n\t    value: function isNode() {\n\t      return (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === \"object\" && \"function\" === \"function\" && !this.isWebWorker() && !this.browser;\n\t    }\n\t\n\t    /**\n\t    * @function isWebWorker - Detects if execution environment is a webworker\n\t    */\n\t\n\t  }, {\n\t    key: 'isWebWorker',\n\t    value: function isWebWorker() {\n\t      return typeof importScripts === \"function\";\n\t    }\n\t\n\t    /**\n\t    * @function isReactNative - Detects if execution environment is reactNative\n\t    */\n\t\n\t  }, {\n\t    key: 'isReactNative',\n\t    value: function isReactNative() {\n\t      return !this.isNode() && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && !this.browser;\n\t    }\n\t\n\t    /**\n\t    * @function isShell - Detects if execution environment is a shell\n\t    */\n\t\n\t  }, {\n\t    key: 'isShell',\n\t    value: function isShell() {\n\t      return this.browser && !this.isNode() && !this.isWebWorker() && !this.isReactNative();\n\t    }\n\t\n\t    /**\n\t    * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n\t    */\n\t\n\t  }, {\n\t    key: 'isLegacyEnvironment',\n\t    value: function isLegacyEnvironment() {\n\t      var isLegacy = false;\n\t      // Force legacy mode for known devices that don't support threading\n\t      if (this.browser && !this.isReactNative()) {\n\t        isLegacy = this.isLegacyDevice();\n\t      }\n\t      // Detect sharedWorker support for use within webworkers\n\t      if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n\t        isLegacy = !this.supportsSharedWorkers();\n\t      }\n\t      return isLegacy || !!!this.locateWorkerObject();\n\t    }\n\t  }, {\n\t    key: 'isLegacyDevice',\n\t    value: function isLegacyDevice() {\n\t      var legacyDevice = false;\n\t      var userAgent = navigator.userAgent;\n\t      var lacksWorkerSupport = typeof this.Worker === 'undefined';\n\t      var legacyAgents = ['Kindle/3.0', 'Mobile/8F190', 'IEMobile'];\n\t      if (lacksWorkerSupport || legacyAgents.indexOf(userAgent) !== -1) {\n\t        legacyDevice = true;\n\t      }\n\t      return legacyDevice;\n\t    }\n\t  }, {\n\t    key: 'supportsSharedWorkers',\n\t    value: function supportsSharedWorkers() {\n\t      var supports = false;\n\t      try {\n\t        var workerBlob = _data2.default.generateBlob();\n\t        var SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n\t        supports = true;\n\t      } catch (e) {\n\t        supports = false;\n\t      }\n\t      return supports;\n\t    }\n\t\n\t    /**\n\t    * @function supportsTransferrableObjects - Detects if execution environment supports typed arrays\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsTransferrableObjects',\n\t    value: function supportsTransferrableObjects() {\n\t      return typeof Uint8Array !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsAtomicOperations - Detects if execution environment supports shared array buffers\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsAtomicOperations',\n\t    value: function supportsAtomicOperations() {\n\t      return typeof SharedArrayBuffer !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function supportsProxies - Detects if execution environment supports proxy objects\n\t    */\n\t\n\t  }, {\n\t    key: 'supportsProxies',\n\t    value: function supportsProxies() {\n\t      return typeof Proxy !== 'undefined';\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Determines which scaffold to use for proper execution for various environments\n\t    */\n\t\n\t  }, {\n\t    key: 'selectHamsterWheel',\n\t    value: function selectHamsterWheel() {\n\t      if (this.isIE10) {\n\t        return './common/hamstersWheel.js';\n\t      }\n\t      if (this.reactNative) {\n\t        return './common/rnHamstersWheel.js';\n\t      }\n\t      if (this.webWorker) {\n\t        return _wheel2.default.worker;\n\t      }\n\t      if (this.node) {\n\t        return _wheel2.default.regular;\n\t      }\n\t      return _data2.default.generateWorkerBlob(_wheel2.default.regular);\n\t    }\n\t  }]);\n\t\n\t  return habitat;\n\t}();\n\t\n\tvar hamstersHabitat = new habitat();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersHabitat;\n\t}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _habitat = __webpack_require__(3);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _logger = __webpack_require__(5);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar data = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function data() {\n\t    _classCallCheck(this, data);\n\t\n\t    this.randomArray = this.randomArray;\n\t    this.aggregateArrays = this.aggregateThreadOutputs;\n\t    this.splitArrays = this.splitArrayIntoSubArrays;\n\t    this.createBlob = this.createDataBlob;\n\t    this.generateWorkerBlob = this.generateWorkerBlob;\n\t    this.processDataType = this.processDataType;\n\t    this.sortOutput = this.sortArray;\n\t    this.getOutput = this.prepareOutput;\n\t    this.prepareJob = this.prepareFunction;\n\t    this.feedHamster = this.messageWorker;\n\t  }\n\t\n\t  /**\n\t  * @function messageWorker - Prepares message to send to thread\n\t  * @param {worker} hamster - Thread to message\n\t  * @param {object} hamsterFood - Message to send to thread\n\t  */\n\t\n\t\n\t  _createClass(data, [{\n\t    key: 'messageWorker',\n\t    value: function messageWorker(hamster, hamsterFood, habitat) {\n\t      if (habitat.reactNative) {\n\t        return hamster.postMessage(JSON.stringify(hamsterFood));\n\t      }\n\t      if (habitat.ie10) {\n\t        return hamster.postMessage(hamsterFood);\n\t      }\n\t      if (habitat.webWorker) {\n\t        return hamster.port.postMessage(hamsterFood);\n\t      }\n\t      return hamster.postMessage(hamsterFood, this.prepareTransferBuffers(hamsterFood, habitat.transferrable));\n\t    }\n\t\n\t    /**\n\t    * @function prepareTransferBuffers - Prepares transferrable buffers for faster message passing\n\t    * @param {object} hamsterFood - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareTransferBuffers',\n\t    value: function prepareTransferBuffers(hamsterFood, transferrable) {\n\t      var buffers = [];\n\t      var key = null;\n\t      if (transferrable) {\n\t        var _iteratorNormalCompletion = true;\n\t        var _didIteratorError = false;\n\t        var _iteratorError = undefined;\n\t\n\t        try {\n\t          for (var _iterator = Object.keys(hamsterFood)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            key = _step.value;\n\t\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        } catch (err) {\n\t          _didIteratorError = true;\n\t          _iteratorError = err;\n\t        } finally {\n\t          try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t              _iterator.return();\n\t            }\n\t          } finally {\n\t            if (_didIteratorError) {\n\t              throw _iteratorError;\n\t            }\n\t          }\n\t        }\n\t      }\n\t      return buffers;\n\t    }\n\t\n\t    /**\n\t    * @function prepareFunction - Prepares transferrable buffers for faster message passing\n\t    * @param {function} functionBody - Message to send to thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareFunction',\n\t    value: function prepareFunction(functionBody) {\n\t      functionBody = String(functionBody);\n\t      if (!_habitat2.default.webWorker) {\n\t        var startingIndex = functionBody.indexOf(\"{\") + 1;\n\t        var endingIndex = functionBody.length - 1;\n\t        return functionBody.substring(startingIndex, endingIndex);\n\t      }\n\t      return functionBody;\n\t    }\n\t\n\t    /**\n\t    * @function generateWorkerBlob - Creates blob uri for flexible scaffold loading\n\t    * @param {function} workerLogic - Scaffold to use within worker thread\n\t    */\n\t\n\t  }, {\n\t    key: 'generateWorkerBlob',\n\t    value: function generateWorkerBlob(workerLogic) {\n\t      var hamsterBlob = this.createDataBlob('(' + String(workerLogic) + ')();');\n\t      var dataBlobURL = URL.createObjectURL(hamsterBlob);\n\t      return dataBlobURL;\n\t    }\n\t\n\t    /**\n\t    * @function processDataType - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'processDataType',\n\t    value: function processDataType(dataType, buffer, transferrable) {\n\t      if (transferrable) {\n\t        return this.typedArrayFromBuffer(dataType, buffer);\n\t      }\n\t      return buffer;\n\t    }\n\t\n\t    /**\n\t    * @function prepareOutput - Prepares final task output\n\t    * @param {task} buffer - Task to prepare output for\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareOutput',\n\t    value: function prepareOutput(task, transferrable) {\n\t      if (task.aggregate && task.threads !== 1) {\n\t        return this.aggregateThreadOutputs(task.output, task.dataType, transferrable);\n\t      }\n\t      return task.output;\n\t    }\n\t\n\t    /**\n\t    * @function sortArray - Sorts array by defined order\n\t    * @param {object} arr - Array to sort\n\t    * @param {string} order - Defined sort order\n\t    */\n\t\n\t  }, {\n\t    key: 'sortArray',\n\t    value: function sortArray(arr, order) {\n\t      switch (order) {\n\t        case 'desc':\n\t        case 'asc':\n\t          return Array.prototype.sort.call(arr, function (a, b) {\n\t            return order === 'asc' ? a - b : b - a;\n\t          });\n\t        case 'ascAlpha':\n\t          return arr.sort();\n\t        case 'descAlpha':\n\t          return arr.reverse();\n\t        default:\n\t          return arr;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function typedArrayFromBuffer - Converts buffer into new typed array\n\t    * @param {string} dataType - Typed array type for this task\n\t    * @param {object} buffer - Buffer to convert\n\t    */\n\t\n\t  }, {\n\t    key: 'typedArrayFromBuffer',\n\t    value: function typedArrayFromBuffer(dataType, buffer) {\n\t      var types = {\n\t        'uint32': Uint32Array,\n\t        'uint16': Uint16Array,\n\t        'uint8': Uint8Array,\n\t        'uint8clamped': Uint8ClampedArray,\n\t        'int32': Int32Array,\n\t        'int16': Int16Array,\n\t        'int8': Int8Array,\n\t        'float32': Float32Array,\n\t        'float64': Float64Array\n\t      };\n\t      if (!types[dataType]) {\n\t        return dataType;\n\t      }\n\t      return new types[dataType](buffer);\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Attempts to locate data blob builder, vender prefixes galore\n\t    */\n\t\n\t  }, {\n\t    key: 'locateBlobBuilder',\n\t    value: function locateBlobBuilder() {\n\t      if (typeof BlobBuilder !== 'undefined') {\n\t        return BlobBuilder;\n\t      }\n\t      if (typeof WebKitBlobBuilder !== 'undefined') {\n\t        return WebKitBlobBuilder;\n\t      }\n\t      if (typeof MozBlobBuilder !== 'undefined') {\n\t        return MozBlobBuilder;\n\t      }\n\t      if (typeof MSBlobBuilder !== 'undefined') {\n\t        return MSBlobBuilder;\n\t      }\n\t      return _logger2.default.error('Environment does not support data blobs!');\n\t    }\n\t\n\t    /**\n\t    * @function createDataBlob - Creates new data blob from textContent\n\t    * @param {string} textContent - Provided text content for blob\n\t    */\n\t\n\t  }, {\n\t    key: 'createDataBlob',\n\t    value: function createDataBlob(textContent) {\n\t      if (typeof Blob === 'undefined') {\n\t        var BlobMaker = this.locateBlobBuilder();\n\t        var blob = new BlobMaker();\n\t        blob.append([textContent], {\n\t          type: 'application/javascript'\n\t        });\n\t        return blob.getBlob();\n\t      }\n\t      return new Blob([textContent], {\n\t        type: 'application/javascript'\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function randomArray - Creates new random array\n\t    * @param {number} count - Number of random elements in array\n\t    * @param {function} onSuccess - onSuccess callback\n\t    */\n\t\n\t  }, {\n\t    key: 'randomArray',\n\t    value: function randomArray(count, onSuccess) {\n\t      var randomArray = [];\n\t      while (count > 0) {\n\t        randomArray.push(Math.round(Math.random() * (100 - 1) + 1));\n\t        count -= 1;\n\t      }\n\t      onSuccess(randomArray);\n\t    }\n\t\n\t    /**\n\t    * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n\t    * @param {array} input - Array of arrays to aggregate\n\t    * @param {string} dataType - Data type to use for typed array\n\t    */\n\t\n\t  }, {\n\t    key: 'aggregateThreadOutputs',\n\t    value: function aggregateThreadOutputs(input, dataType, transferrable) {\n\t      if (!dataType || !transferrable) {\n\t        return input.reduce(function (a, b) {\n\t          return a.concat(b);\n\t        });\n\t      }\n\t      var i = 0;\n\t      var len = input.length;\n\t      var bufferLength = 0;\n\t      for (i; i < len; i += 1) {\n\t        bufferLength += input[i].length;\n\t      }\n\t      var output = this.processDataType(dataType, bufferLength, transferrable);\n\t      var offset = 0;\n\t      for (i = 0; i < len; i += 1) {\n\t        output.set(input[i], offset);\n\t        offset += input[i].length;\n\t      }\n\t      return output;\n\t    }\n\t\n\t    /**\n\t    * @function splitArrayIntoSubArrays - Splits a single array into multiple equal sized subarrays\n\t    * @param {array} array - Array to split\n\t    * @param {number} n - Number of subarrays to create\n\t    */\n\t\n\t  }, {\n\t    key: 'splitArrayIntoSubArrays',\n\t    value: function splitArrayIntoSubArrays(array, n) {\n\t      var i = 0;\n\t      var threadArrays = [];\n\t      var size = Math.ceil(array.length / n);\n\t      if (array.slice) {\n\t        while (i < array.length) {\n\t          threadArrays.push(array.slice(i, i += size));\n\t        }\n\t      } else {\n\t        while (i < array.length) {\n\t          threadArrays.push(array.subarray(i, i += size));\n\t        }\n\t      }\n\t      return threadArrays;\n\t    }\n\t  }]);\n\t\n\t  return data;\n\t}();\n\t\n\tvar hamstersData = new data();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersData;\n\t}\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _version = __webpack_require__(2);\n\t\n\tvar _version2 = _interopRequireDefault(_version);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar logger = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function logger() {\n\t    _classCallCheck(this, logger);\n\t\n\t    this.logBook = {\n\t      error: [],\n\t      warning: [],\n\t      info: []\n\t    };\n\t    this.info = this.infoLog;\n\t    this.warning = this.warningLog;\n\t    this.error = this.errorLog;\n\t    this.errorFromThread = this.errorFromThread;\n\t    this.saveLogEntry = this.saveToLogBook;\n\t    this.getLogEntries = this.fetchLogBook;\n\t    this.createAndSaveStampedMessage = this.generateTimeStampedMessage;\n\t    this.searchLogEntries = this.searchLogBook;\n\t  }\n\t\n\t  _createClass(logger, [{\n\t    key: 'infoLog',\n\t    value: function infoLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Info', message);\n\t      console.info(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'warningLog',\n\t    value: function warningLog(message) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Warning', message);\n\t      console.warn(timeStampedMessage);\n\t    }\n\t  }, {\n\t    key: 'errorLog',\n\t    value: function errorLog(message, reject) {\n\t      var timeStampedMessage = this.createAndSaveStampedMessage('Error', message);\n\t      console.error(timeStampedMessage);\n\t      if (reject) {\n\t        reject(timeStampedMessage);\n\t      } else {\n\t        return timeStampedMessage;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'generateTimeStampedMessage',\n\t    value: function generateTimeStampedMessage(type, message) {\n\t      var record = 'Hamsters.js v' + _version2.default + ' ' + type + ': ' + message + ' @ ' + Date.now();\n\t      this.saveLogEntry(type.toLowerCase(), record);\n\t      return record;\n\t    }\n\t  }, {\n\t    key: 'errorFromThread',\n\t    value: function errorFromThread(error, reject) {\n\t      var errorMessage = '#' + error.lineno + ' in ' + error.filename + ': ' + error.message;\n\t      this.errorLog(errorMessage, reject);\n\t    }\n\t  }, {\n\t    key: 'saveToLogBook',\n\t    value: function saveToLogBook(eventType, message) {\n\t      this.logBook[eventType].push(message);\n\t    }\n\t  }, {\n\t    key: 'fetchLogBook',\n\t    value: function fetchLogBook(eventType) {\n\t      if (eventType) {\n\t        return this.logBook[eventType];\n\t      }\n\t      return this.logBook;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBook',\n\t    value: function findStringInLogBook(logBookEntries, searchString) {\n\t      var searchResults = [];\n\t      var i = 0;\n\t      for (i; i < logBookEntries.length; i++) {\n\t        if (logBookEntries[i].indexOf(searchString) !== -1) {\n\t          searchResults.push(logBookEntries[i]);\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'findStringInLogBookAllTypes',\n\t    value: function findStringInLogBookAllTypes(logBook, searchString) {\n\t      var searchResults = [];\n\t      var key = void 0,\n\t          eventTypeResults = void 0,\n\t          tmpEntries = null;\n\t      for (key in logBook) {\n\t        if (logBook.hasOwnProperty(key)) {\n\t          tmpEntries = logBook[key];\n\t          eventTypeResults = this.findStringInLogBook(tmpEntries, searchString);\n\t          for (var i = eventTypeResults.length - 1; i >= 0; i--) {\n\t            searchResults.push(eventTypeResults[i]);\n\t          }\n\t        }\n\t      }\n\t      return searchResults;\n\t    }\n\t  }, {\n\t    key: 'searchLogBook',\n\t    value: function searchLogBook(searchString, eventType) {\n\t      var finalResults = [];\n\t      if (eventType) {\n\t        finalResults = this.findStringInLogBook(this.logBook[eventType], searchString);\n\t      } else {\n\t        finalResults = this.findStringInLogBookAllTypes(this.logBook, searchString);\n\t      }\n\t      return {\n\t        total: finalResults.length,\n\t        results: finalResults\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return logger;\n\t}();\n\t\n\tvar hamstersLogger = new logger();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersLogger;\n\t}\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar wheel = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function wheel() {\n\t    _classCallCheck(this, wheel);\n\t\n\t    this.worker = this.workerScaffold;\n\t    this.regular = this.regularScaffold;\n\t    this.legacy = this.legacyScaffold;\n\t  }\n\t\n\t  /**\n\t  * @function workerScaffold - Provides worker body for library functionality when used within a worker [threads inside threads]\n\t  */\n\t\n\t\n\t  _createClass(wheel, [{\n\t    key: 'workerScaffold',\n\t    value: function workerScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      addEventListener('connect', function (incomingConnection) {\n\t        var port = incomingConnection.ports[0];\n\t        port.start();\n\t        port.addEventListener('message', function (incomingMessage) {\n\t          params = incomingMessage.data;\n\t          rtn = {\n\t            data: [],\n\t            dataType: params.dataType\n\t          };\n\t          if (params.importScripts) {\n\t            self.importScripts(params.importScripts);\n\t          }\n\t          eval(\"(\" + params.hamstersJob + \")\")();\n\t          port.postMessage(rtn);\n\t        }, false);\n\t      }, false);\n\t    }\n\t\n\t    /**\n\t    * @function workerScaffold - Provides worker body for library functionality\n\t    */\n\t\n\t  }, {\n\t    key: 'regularScaffold',\n\t    value: function regularScaffold() {\n\t      'use strict';\n\t\n\t      if (typeof self === 'undefined') {\n\t        var _self = global || window || this;\n\t      }\n\t\n\t      self.params = {};\n\t      self.rtn = {};\n\t\n\t      function prepareReturn(returnObject) {\n\t        var dataType = returnObject.dataType;\n\t        if (dataType) {\n\t          returnObject.data = typedArrayFromBuffer(dataType, returnObject.data);\n\t        }\n\t        return returnObject;\n\t      }\n\t\n\t      function typedArrayFromBuffer(dataType, buffer) {\n\t        var types = {\n\t          'uint32': Uint32Array,\n\t          'uint16': Uint16Array,\n\t          'uint8': Uint8Array,\n\t          'uint8clamped': Uint8ClampedArray,\n\t          'int32': Int32Array,\n\t          'int16': Int16Array,\n\t          'int8': Int8Array,\n\t          'float32': Float32Array,\n\t          'float64': Float64Array\n\t        };\n\t        if (!types[dataType]) {\n\t          return buffer;\n\t        }\n\t        return new types[dataType](buffer);\n\t      }\n\t\n\t      function prepareTransferBuffers(hamsterFood) {\n\t        var buffers = [];\n\t        var key = null;\n\t        for (key in hamsterFood) {\n\t          if (hamsterFood.hasOwnProperty(key) && hamsterFood[key]) {\n\t            if (hamsterFood[key].buffer) {\n\t              buffers.push(hamsterFood[key].buffer);\n\t            } else if (Array.isArray(hamsterFood[key]) && typeof ArrayBuffer !== 'undefined') {\n\t              buffers.push(new ArrayBuffer(hamsterFood[key]));\n\t            }\n\t          }\n\t        }\n\t        return buffers;\n\t      }\n\t\n\t      self.onmessage = function (incomingMessage) {\n\t        params = incomingMessage.data;\n\t        rtn = {\n\t          data: [],\n\t          dataType: params.dataType ? params.dataType.toLowerCase() : null\n\t        };\n\t        if (params.importScripts) {\n\t          self.importScripts(params.importScripts);\n\t        }\n\t        new Function(params.hamstersJob)();\n\t        postMessage(prepareReturn(rtn), prepareTransferBuffers(rtn));\n\t      };\n\t    }\n\t\n\t    /**\n\t    * @function legacyScaffold - Provides library functionality for legacy devices\n\t    */\n\t\n\t  }, {\n\t    key: 'legacyScaffold',\n\t    value: function legacyScaffold(params, resolve) {\n\t      var _this = this;\n\t\n\t      setTimeout(function () {\n\t        if (typeof self === 'undefined') {\n\t          var self = global || window || _this;\n\t        }\n\t        self.params = params;\n\t        self.rtn = {\n\t          data: []\n\t        };\n\t        params.hamstersJob();\n\t        resolve(rtn);\n\t      }, 4); //4ms delay (HTML5 spec minimum), simulate threading\n\t    }\n\t  }]);\n\t\n\t  return wheel;\n\t}();\n\t\n\t;\n\t\n\tvar hamstersWheel = new wheel();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersWheel;\n\t}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _data = __webpack_require__(4);\n\t\n\tvar _data2 = _interopRequireDefault(_data);\n\t\n\tvar _habitat = __webpack_require__(3);\n\t\n\tvar _habitat2 = _interopRequireDefault(_habitat);\n\t\n\tvar _logger = __webpack_require__(5);\n\t\n\tvar _logger2 = _interopRequireDefault(_logger);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar pool = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function pool() {\n\t    _classCallCheck(this, pool);\n\t\n\t    this.tasks = [];\n\t    this.threads = [];\n\t    this.running = [];\n\t    this.pending = [];\n\t    this.fetchHamster = this.grabHamster;\n\t  }\n\t\n\t  /**\n\t  * @function grabHamster - Adds task to queue waiting for available thread\n\t  * @param {object} array - Provided data to execute logic on\n\t  * @param {object} task - Provided library functionality options for this task\n\t  * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t  * @param {function} wheel - Results from select hamster wheel\n\t  * @param {function} resolve - onSuccess method\n\t  * @param {function} reject - onError method\n\t  */\n\t\n\t\n\t  _createClass(pool, [{\n\t    key: 'addWorkToPending',\n\t    value: function addWorkToPending(array, task, persistence, wheel, resolve, reject) {\n\t      this.pending.push(arguments);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Invokes processing of next item in queue\n\t    * @param {object} item - Task to process\n\t    */\n\t\n\t  }, {\n\t    key: 'processQueue',\n\t    value: function processQueue(item, hamster) {\n\t      return this.runTask(hamster, item[0], item[1], item[2], item[3], item[4]);\n\t    }\n\t\n\t    /**\n\t    * @function grabHamster - Keeps track of threads running, scoped globally and to task\n\t    * @param {number} threadId - Id of thread\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    */\n\t\n\t  }, {\n\t    key: 'grabHamster',\n\t    value: function grabHamster(threadId, habitat) {\n\t      if (habitat.persistence) {\n\t        return this.threads[threadId];\n\t      }\n\t      return this.spawnHamster();\n\t    }\n\t\n\t    /**\n\t    * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {number} id - Id of thread to track\n\t    */\n\t\n\t  }, {\n\t    key: 'keepTrackOfThread',\n\t    value: function keepTrackOfThread(task, id) {\n\t      task.workers.push(id); //Keep track of threads scoped to current task\n\t      this.running.push(id); //Keep track of all currently running threads\n\t    }\n\t\n\t    /**\n\t    * @function registerTask - Adds task to execution pool based on id\n\t    * @param {number} id - Id of task to register\n\t    */\n\t\n\t  }, {\n\t    key: 'registerTask',\n\t    value: function registerTask(id) {\n\t      this.tasks.push(id);\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamsters - Spawns multiple new threads for execution\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {number} maxThreds - Max number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamsters',\n\t    value: function spawnHamsters(maxThreads) {\n\t      for (maxThreads; maxThreads > 0; maxThreads--) {\n\t        this.threads.push(this.spawnHamster());\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function spawnHamster - Spawns a new thread for execution\n\t    * @return {object} WebWorker - New WebWorker thread using selected scaffold\n\t    */\n\t\n\t  }, {\n\t    key: 'spawnHamster',\n\t    value: function spawnHamster() {\n\t      var newWheel = _habitat2.default.selectHamsterWheel();\n\t      if (_habitat2.default.webWorker) {\n\t        return new _habitat2.default.SharedWorker(newWheel, 'SharedHamsterWheel');\n\t      }\n\t      return new _habitat2.default.Worker(newWheel);\n\t    }\n\t\n\t    /**\n\t    * @function prepareMeal - Prepares message to send to a thread and invoke execution\n\t    * @param {object} threadArray - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @return {object} hamsterFood - Prepared message to send to a thread\n\t    */\n\t\n\t  }, {\n\t    key: 'prepareMeal',\n\t    value: function prepareMeal(threadArray, task) {\n\t      var hamsterFood = {\n\t        array: threadArray\n\t      };\n\t      for (var key in task.input) {\n\t        if (task.input.hasOwnProperty(key) && ['array', 'threads'].indexOf(key) === -1) {\n\t          hamsterFood[key] = task.input[key];\n\t        }\n\t      }\n\t      return hamsterFood;\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs function using thread\n\t    * @param {object} array - Provided data to execute logic on\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'runTask',\n\t    value: function runTask(hamster, array, task, scope, resolve, reject) {\n\t      var threadId = this.running.length;\n\t      var hamsterFood = this.prepareMeal(array, task);\n\t      this.registerTask(task.id);\n\t      this.keepTrackOfThread(task, threadId);\n\t      if (scope.habitat.legacy) {\n\t        scope.habitat.legacyWheel(hamsterFood, resolve, reject);\n\t      } else {\n\t        this.trainHamster(task.count, task, hamster, scope, resolve, reject);\n\t        scope.data.feedHamster(hamster, hamsterFood, scope.habitat);\n\t      }\n\t      task.count += 1; //Increment count, thread is running\n\t    }\n\t\n\t    /**\n\t    * @function hamsterWheel - Runs or queues function using threads\n\t    * @param {object} array - Provided library functionality options for this task\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Results from select hamster wheel\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'hamsterWheel',\n\t    value: function hamsterWheel(array, task, scope, resolve, reject) {\n\t      if (scope.maxThreads === this.running.length) {\n\t        return this.addWorkToPending(array, task, scope, resolve, reject);\n\t      }\n\t      var hamster = this.grabHamster(this.running.length, scope.habitat);\n\t      return this.runTask(hamster, array, task, scope, resolve, reject);\n\t    }\n\t\n\t    /**\n\t    * @function returnOutputAndRemoveTask - gathers thread outputs into final result\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {function} resolve - onSuccess method\n\t    */\n\t\n\t  }, {\n\t    key: 'returnOutputAndRemoveTask',\n\t    value: function returnOutputAndRemoveTask(task, resolve) {\n\t      var output = _data2.default.getOutput(task, _habitat2.default.transferrable);\n\t      if (task.sort) {\n\t        output = _data2.default.sortOutput(output, task.sort);\n\t      }\n\t      this.tasks[task.id] = null; //Clean up our task, not needed any longer\n\t      resolve({\n\t        data: output\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @function trainHamster - Trains thread in how to behave\n\t    * @param {number} threadId - Internal use id for this thread\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {worker} hamster - Thread to train\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} resolve - onSuccess method\n\t    * @param {function} reject - onError method\n\t    */\n\t\n\t  }, {\n\t    key: 'trainHamster',\n\t    value: function trainHamster(threadId, task, hamster, scope, resolve, reject) {\n\t      var pool = this;\n\t      // Handle successful response from a thread\n\t      function onThreadResponse(message) {\n\t        var results = message.data;\n\t        pool.running.splice(pool.running.indexOf(threadId), 1); //Remove thread from running pool\n\t        task.workers.splice(task.workers.indexOf(threadId), 1); //Remove thread from task running pool\n\t        // String only communcation for rn...in 2k18\n\t        if (scope.habitat.reactNative) {\n\t          task.output[threadId] = JSON.parse(results.data);\n\t        } else {\n\t          task.output[threadId] = results.data;\n\t        }\n\t        if (task.workers.length === 0 && task.count === task.threads) {\n\t          pool.returnOutputAndRemoveTask(task, resolve);\n\t        }\n\t        if (pool.pending.length !== 0) {\n\t          pool.processQueue(pool.pending.shift(), hamster);\n\t        } else if (!scope.habitat.persistence && !scope.habitat.webWorker) {\n\t          hamster.terminate(); //Kill the thread only if no items waiting to run (20-22% performance improvement observed during testing, repurposing threads vs recreating them)\n\t        }\n\t      }\n\t      // Handle error response from a thread\n\t      function onThreadError(error) {\n\t        _logger2.default.errorFromThread(error, reject);\n\t      }\n\t      // Register on message/error handlers\n\t      if (_habitat2.default.webWorker) {\n\t        hamster.port.onmessage = onThreadResponse;\n\t        hamster.port.onmessageerror = onThreadError;\n\t        hamster.port.onerror = onThreadError;\n\t      } else {\n\t        hamster.onmessage = onThreadResponse;\n\t        hamster.onmessageerror = onThreadError;\n\t        hamster.onerror = onThreadError;\n\t      }\n\t    }\n\t\n\t    /**\n\t    * @function scheduleTask - Adds new task to the system for execution\n\t    * @param {object} task - Provided library functionality options for this task\n\t    * @param {boolean} persistence - Whether persistence mode is enabled or not\n\t    * @param {function} wheel - Scaffold to execute login within\n\t    * @param {number} maxThreads - Maximum number of threads for this client\n\t    */\n\t\n\t  }, {\n\t    key: 'scheduleTask',\n\t    value: function scheduleTask(task, scope) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        var threadArrays = [];\n\t        if (task.input.array && task.threads !== 1) {\n\t          threadArrays = scope.data.splitArrays(task.input.array, task.threads); //Divide our array into equal array sizes\n\t        }\n\t        var i = 0;\n\t        while (i < task.threads) {\n\t          if (threadArrays && task.threads !== 1) {\n\t            _this.hamsterWheel(threadArrays[i], task, scope, resolve, reject);\n\t          } else {\n\t            _this.hamsterWheel(task.input.array, task, scope, resolve, reject);\n\t          }\n\t          i += 1;\n\t        }\n\t      });\n\t    }\n\t  }]);\n\t\n\t  return pool;\n\t}();\n\t\n\tvar hamsterPool = new pool();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamsterPool;\n\t}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: Hamsters.js                                                               *\n\t* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar memoizer = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function memoizer() {\n\t    _classCallCheck(this, memoizer);\n\t\n\t    this.maxCacheEntries = 25;\n\t    this.cacheEntries = [];\n\t    this.itemCached = this.isItemCached;\n\t    this.fetchItem = this.fetchItemFromCache;\n\t    this.saveItem = this.saveItemToCache;\n\t  }\n\t\n\t  /**\n\t  * @function isItemCached - Checks for existing data in cache\n\t  * @param {object} input - Provided library execution options\n\t  * @param {method} functionToRun - Function to execute\n\t  * @return {object} Execution results from cache, or false\n\t  */\n\t\n\t\n\t  _createClass(memoizer, [{\n\t    key: 'isItemCached',\n\t    value: function isItemCached(input, method) {\n\t      return !!this.fetchItem({ fn: method, data: input }) || false;\n\t    }\n\t\n\t    /**\n\t    * @function fetchItemFromCache - Fetches cache item from cache\n\t    * @param {object} cacheItem - Cache item to fetch\n\t    * @return {object} CacheResults, or false\n\t    */\n\t\n\t  }, {\n\t    key: 'fetchItemFromCache',\n\t    value: function fetchItemFromCache(cacheItem) {\n\t      var cachedResult = null;\n\t      var key = null;\n\t      var _iteratorNormalCompletion = true;\n\t      var _didIteratorError = false;\n\t      var _iteratorError = undefined;\n\t\n\t      try {\n\t        for (var _iterator = Object.keys(this.cacheEntries)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t          key = _step.value;\n\t\n\t          if (cacheItem[key].fn === cacheItem.fn && cacheItem[key].input === cacheItem.data) {\n\t            cachedResult = cacheItem[key].input;\n\t          }\n\t        }\n\t      } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t      } finally {\n\t        try {\n\t          if (!_iteratorNormalCompletion && _iterator.return) {\n\t            _iterator.return();\n\t          }\n\t        } finally {\n\t          if (_didIteratorError) {\n\t            throw _iteratorError;\n\t          }\n\t        }\n\t      }\n\t\n\t      return cachedResult || false;\n\t    }\n\t\n\t    /**\n\t    * @function isItemCached - Checks for existing data in cache\n\t    * @param {method} functionToRun - Function to execute\n\t    * @param {object} data - Execution results to cache\n\t    */\n\t\n\t  }, {\n\t    key: 'saveItemToCache',\n\t    value: function saveItemToCache(method, data, maxCacheEntries) {\n\t      var itemToCache = {\n\t        fn: method,\n\t        input: data\n\t      };\n\t      var cachedItems = this.cacheEntries;\n\t      if (cachedItems.length < maxCacheEntries) {\n\t        cachedItems.push(itemToCache);\n\t      } else {\n\t        cachedItems.splice(0, 0, itemToCache);\n\t      }\n\t      this.cacheEntries = cachedItems;\n\t    }\n\t  }]);\n\t\n\t  return memoizer;\n\t}();\n\t\n\tvar hamstersMemoizer = new memoizer();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = hamstersMemoizer;\n\t}\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=hamsters.node.min.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/hamsters.js/build/hamsters.node.min.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}