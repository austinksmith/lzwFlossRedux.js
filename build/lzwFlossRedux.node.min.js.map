{"version":3,"sources":["webpack:///lzwFlossRedux.node.min.js","webpack:///webpack/bootstrap c14dc230cf6bb4713612","webpack:///./lzwFlossRedux.js"],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","lzwFlossReduxjs","this","version","encode","lzwEncode","decode","lzwDecode","value","inputString","_this","Promise","resolve","reject","run","encodeString","_this2","decodeString","fn","onSuccess","onError","_inputString","unescape","encodeURIComponent","stringArray","splitString","params","array","hamsters","promise","then","output","_output","data","decodeURIComponent","escape","catch","error","inputArray","split","outputArray","push","charCodeAt","returnCharacterCode","phrase","dictionary","n","String","fromCharCode","currentCharacter","phrasePlusChar","code","rtn","join","returnPhrase","currentCode","oldPhrase","currentPhrase","charAt","lzwFlossRedux"],"mappings":"AAAAA,OAAOC,QACE,SAAUC,GCGnB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAH,OAGA,IAAAD,GAAAK,EAAAD,IACAH,WACAK,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAR,EAAAC,QAAAD,IAAAC,QAAAE,GAGAH,EAAAO,QAAA,EAGAP,EAAAC,QAvBA,GAAAI,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDOM,SAAUH,EAAQC,EAASE,GAEhCH,EAAOC,QAAUE,EAAoB,IAKhC,SAAUH,EAAQC,GEzCxB,YF0DC,SAASW,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MEtD3hBkB,EF0DiB,WEpDrB,QAAAA,KAAcpB,EAAAqB,KAAAD,GACZC,KAAKC,QAAU,QACfD,KAAKE,OAASF,KAAKG,UACnBH,KAAKI,OAASJ,KAAKK,UFwOpB,MAjKAtB,GAAagB,IACXJ,IAAK,YACLW,MAAO,SEhEAC,GAAa,GAAAC,GAAAR,IACrB,OAAO,IAAIS,SAAQ,SAACC,EAASC,GAC3BH,EAAKI,IAAIL,EAAaC,EAAKK,aAAcH,EAASC,GAAQ,QF8E3DhB,IAAK,YACLW,MAAO,SErEAC,GAAa,GAAAO,GAAAd,IACrB,OAAO,IAAIS,SAAQ,SAACC,EAASC,GAC3BG,EAAKF,IAAIL,EAAaO,EAAKC,aAAcL,EAASC,GAAQ,QFoF3DhB,IAAK,MACLW,MAAO,SE1ENC,EAAaS,EAAIC,EAAWC,EAASd,GACvC,GAAIe,GAAef,EAASG,EAAca,SAASC,mBAAmBd,IAClEe,EAActB,KAAKuB,YAAYJ,GAC/BK,GACFC,MAAOH,EAETI,UAASC,QAAQH,EAAQR,GAAIY,KAAK,SAACC,GACjC,GAAIC,GAAUD,EAAOE,KAAK,EACvB3B,MAAW,IACZ0B,EAAUE,mBAAmBC,OAAOH,KAEtCb,EAAUa,KACTI,MAAM,SAACC,GACRjB,EAAQiB,QFqFTxC,IAAK,cACLW,MAAO,SE7EEC,GAGV,IAAK,GAFD6B,IAAc7B,EAAc,IAAI8B,MAAM,IACtCC,KACKnD,EAAI,EAAGA,EAAIiD,EAAWhD,OAAQD,IACrCmD,EAAYC,KAAKH,EAAWjD,GAAGqD,WAAW,GAE5C,OAAOF,MFuFN3C,IAAK,eACLW,MAAO,WE/ER,GAAImC,GAAsB,SAASC,GACjC,MAAGA,GAAOtD,OAAS,EACVuD,EAAWD,GAEbA,EAAOF,WAAW,IAEvBlB,KACAsB,EAAI,CACR,KAAKA,EAAGA,EAAIpB,OAAOC,MAAMrC,OAAQwD,IAC/BtB,EAAYsB,GAAKC,OAAOC,aAAatB,OAAOC,MAAMmB,GAEpD,IAAIG,GAKAC,EAJAnB,KACAc,KACAM,EAAO,IACPP,EAASpB,EAAY,GAErBnC,EAAI,CACR,KAAKA,EAAGA,EAAImC,EAAYlC,OAAQD,IAC9B4D,EAAmBzB,EAAYnC,GAC/B6D,EAAiBL,EAAWD,EAASK,GACjCC,EACFN,GAAUK,GAEVlB,EAAOU,KAAKE,EAAoBC,IAChCC,EAAWD,EAASK,GAAoBE,EACxCA,IACAP,EAASK,EAIb,KADAlB,EAAOU,KAAKE,EAAoBC,IAC3BvD,EAAI,EAAGA,EAAI0C,EAAOzC,OAAQD,IAC7B+D,IAAInB,KAAK5C,GAAK0D,OAAOC,aAAajB,EAAO1C,GAE3C+D,KAAInB,KAAOmB,IAAInB,KAAKoB,KAAK,OF0FxBxD,IAAK,eACLW,MAAO,WElFR,GAAI8C,GAAe,SAASC,EAAaC,EAAWP,GAClD,MAAsC,mBAA5BJ,GAAWU,GACZV,EAAWU,GAEZC,EAAYP,GAElBzB,KACAsB,EAAI,CACR,KAAKA,EAAGA,EAAIpB,OAAOC,MAAMrC,OAAQwD,IAC/BtB,EAAYsB,GAAKC,OAAOC,aAAatB,OAAOC,MAAMmB,GAEpD,IAGIS,GACAE,EAJAR,EAAmBzB,EAAY,GAC/BgC,EAAYP,EACZE,EAAO,IAGPN,IACJO,KAAInB,KAAKQ,KAAKQ,EACd,KAAK,GAAI5D,GAAI,EAAGA,EAAImC,EAAYlC,OAAQD,IACtCkE,EAAc7B,OAAOC,MAAMtC,GAEzBoE,EADEF,EAAc,IACA/B,EAAYnC,GAEZiE,EAAaC,EAAaC,EAAWP,GAEvDG,IAAInB,KAAKQ,KAAKgB,GACdR,EAAmBQ,EAAcC,OAAO,GACxCb,EAAWM,GAASK,EAAYP,EAChCO,EAAYC,EACZN,GAEFC,KAAInB,KAAOmB,IAAInB,KAAKoB,KAAK,QFuFnBpD,KElFN0D,EAAgB,GAAI1D,EAEF,oBAAXhC,IAAoD,mBAAnBA,GAAOC,UACjDD,EAAOC,QAAUyF","file":"lzwFlossRedux.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\t\n\t/***********************************************************************************\n\t* Title: lzwFlossRedux                                                             *\n\t* Description: 100% Vanilla Javascript Multithreaded LZW Compression Library       *\n\t* Author: Austin K. Smith                                                          *\n\t* Contact: austin@asmithdev.com                                                    *  \n\t* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n\t* License: Artistic License 2.0                                                    *\n\t***********************************************************************************/\n\t\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar lzwFlossReduxjs = function () {\n\t\n\t  /**\n\t  * @constructor\n\t  * @function constructor - Sets properties for this class\n\t  */\n\t  function lzwFlossReduxjs() {\n\t    _classCallCheck(this, lzwFlossReduxjs);\n\t\n\t    this.version = '1.0.0';\n\t    this.encode = this.lzwEncode;\n\t    this.decode = this.lzwDecode;\n\t  }\n\t\n\t  /**\n\t  * @description: Generates a thread and lzw encodes the supplied string\n\t  * @method encode\n\t  * @param {string} inputString\n\t  * @param {function} onSuccess\n\t  */\n\t\n\t\n\t  _createClass(lzwFlossReduxjs, [{\n\t    key: 'lzwEncode',\n\t    value: function lzwEncode(inputString) {\n\t      var _this = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this.run(inputString, _this.encodeString, resolve, reject, false);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Generates a thread and decodes the supplied lzw encoded string\n\t    * @method decode\n\t    * @param {string} inputString\n\t    * @param {function} onSuccess\n\t    */\n\t\n\t  }, {\n\t    key: 'lzwDecode',\n\t    value: function lzwDecode(inputString) {\n\t      var _this2 = this;\n\t\n\t      return new Promise(function (resolve, reject) {\n\t        _this2.run(inputString, _this2.decodeString, resolve, reject, true);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Abstracts hamsters usage for reusability\n\t    * @method run\n\t    * @param {string} inputString\n\t    * @param {function} encodeOrDecode\n\t    * @param {function} onSuccess\n\t    */\n\t\n\t  }, {\n\t    key: 'run',\n\t    value: function run(inputString, fn, onSuccess, onError, decode) {\n\t      var _inputString = decode ? inputString : unescape(encodeURIComponent(inputString));\n\t      var stringArray = this.splitString(_inputString);\n\t      var params = {\n\t        array: stringArray\n\t      };\n\t      hamsters.promise(params, fn).then(function (output) {\n\t        var _output = output.data[0];\n\t        if (decode === true) {\n\t          _output = decodeURIComponent(escape(_output));\n\t        }\n\t        onSuccess(_output);\n\t      }).catch(function (error) {\n\t        onError(error);\n\t      });\n\t    }\n\t\n\t    /**\n\t    * @description: Splits a string into a charcode array\n\t    * @method splitString\n\t    * @param {string} inputString\n\t    */\n\t\n\t  }, {\n\t    key: 'splitString',\n\t    value: function splitString(inputString) {\n\t      var inputArray = (inputString + \"\").split(\"\");\n\t      var outputArray = [];\n\t      for (var i = 0; i < inputArray.length; i++) {\n\t        outputArray.push(inputArray[i].charCodeAt(0));\n\t      }\n\t      return outputArray;\n\t    }\n\t\n\t    /**\n\t    * @description: Function to be executed within a thread to encode a string\n\t    * @method encodeString\n\t    * @param {params} Object\n\t    */\n\t\n\t  }, {\n\t    key: 'encodeString',\n\t    value: function encodeString() {\n\t      var returnCharacterCode = function returnCharacterCode(phrase) {\n\t        if (phrase.length > 1) {\n\t          return dictionary[phrase];\n\t        }\n\t        return phrase.charCodeAt(0);\n\t      };\n\t      var stringArray = [];\n\t      var n = 0;\n\t      for (n; n < params.array.length; n++) {\n\t        stringArray[n] = String.fromCharCode(params.array[n]);\n\t      }\n\t      var currentCharacter;\n\t      var output = [];\n\t      var dictionary = {};\n\t      var code = 256;\n\t      var phrase = stringArray[0];\n\t      var phrasePlusChar;\n\t      var i = 1;\n\t      for (i; i < stringArray.length; i++) {\n\t        currentCharacter = stringArray[i];\n\t        phrasePlusChar = dictionary[phrase + currentCharacter];\n\t        if (phrasePlusChar) {\n\t          phrase += currentCharacter;\n\t        } else {\n\t          output.push(returnCharacterCode(phrase));\n\t          dictionary[phrase + currentCharacter] = code;\n\t          code++;\n\t          phrase = currentCharacter;\n\t        }\n\t      }\n\t      output.push(returnCharacterCode(phrase));\n\t      for (i = 0; i < output.length; i++) {\n\t        rtn.data[i] = String.fromCharCode(output[i]);\n\t      }\n\t      rtn.data = rtn.data.join(\"\");\n\t    }\n\t\n\t    /**\n\t    * @description: Function to be executed within a thread to decode an already encoded string\n\t    * @method decodeString\n\t    * @param {params} Object\n\t    */\n\t\n\t  }, {\n\t    key: 'decodeString',\n\t    value: function decodeString() {\n\t      var returnPhrase = function returnPhrase(currentCode, oldPhrase, currentCharacter) {\n\t        if (typeof dictionary[currentCode] !== 'undefined') {\n\t          return dictionary[currentCode];\n\t        }\n\t        return oldPhrase + currentCharacter;\n\t      };\n\t      var stringArray = [];\n\t      var n = 0;\n\t      for (n; n < params.array.length; n++) {\n\t        stringArray[n] = String.fromCharCode(params.array[n]);\n\t      }\n\t      var currentCharacter = stringArray[0];\n\t      var oldPhrase = currentCharacter;\n\t      var code = 256;\n\t      var currentCode;\n\t      var currentPhrase;\n\t      var dictionary = {};\n\t      rtn.data.push(currentCharacter);\n\t      for (var i = 1; i < stringArray.length; i++) {\n\t        currentCode = params.array[i];\n\t        if (currentCode < 256) {\n\t          currentPhrase = stringArray[i];\n\t        } else {\n\t          currentPhrase = returnPhrase(currentCode, oldPhrase, currentCharacter);\n\t        }\n\t        rtn.data.push(currentPhrase);\n\t        currentCharacter = currentPhrase.charAt(0);\n\t        dictionary[code] = oldPhrase + currentCharacter;\n\t        oldPhrase = currentPhrase;\n\t        code++;\n\t      }\n\t      rtn.data = rtn.data.join(\"\");\n\t    }\n\t  }]);\n\t\n\t  return lzwFlossReduxjs;\n\t}();\n\t\n\tvar lzwFlossRedux = new lzwFlossReduxjs();\n\t\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t  module.exports = lzwFlossRedux;\n\t}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// lzwFlossRedux.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c14dc230cf6bb4713612","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: lzwFlossRedux                                                             *\n* Description: 100% Vanilla Javascript Multithreaded LZW Compression Library       *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2015 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n'use strict';\n\nclass lzwFlossReduxjs {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    this.version = '1.0.0';\n    this.encode = this.lzwEncode;\n    this.decode = this.lzwDecode;\n  }\n\n  /**\n  * @description: Generates a thread and lzw encodes the supplied string\n  * @method encode\n  * @param {string} inputString\n  * @param {function} onSuccess\n  */\n  lzwEncode(inputString) {\n    return new Promise((resolve, reject) => {\n      this.run(inputString, this.encodeString, resolve, reject, false);\n    });\n  }\n\n  /**\n  * @description: Generates a thread and decodes the supplied lzw encoded string\n  * @method decode\n  * @param {string} inputString\n  * @param {function} onSuccess\n  */\n  lzwDecode(inputString) {\n    return new Promise((resolve, reject) => {\n      this.run(inputString, this.decodeString, resolve, reject, true);\n    });\n  }\n\n  /**\n  * @description: Abstracts hamsters usage for reusability\n  * @method run\n  * @param {string} inputString\n  * @param {function} encodeOrDecode\n  * @param {function} onSuccess\n  */\n  run(inputString, fn, onSuccess, onError, decode) {\n    var _inputString = decode ? inputString : unescape(encodeURIComponent(inputString));\n    var stringArray = this.splitString(_inputString);\n    var params = {\n      array: stringArray\n    }\n    hamsters.promise(params, fn).then((output) => {\n      var _output = output.data[0];\n      if(decode === true) {\n        _output = decodeURIComponent(escape(_output));\n      }\n      onSuccess(_output);\n    }).catch((error) => {\n      onError(error);\n    });\n  }\n\n  /**\n  * @description: Splits a string into a charcode array\n  * @method splitString\n  * @param {string} inputString\n  */\n  splitString(inputString) {\n    var inputArray = (inputString + \"\").split(\"\");\n    var outputArray = [];\n    for (var i = 0; i < inputArray.length; i++) {\n      outputArray.push(inputArray[i].charCodeAt(0));\n    }\n    return outputArray;\n  }\n\n  /**\n  * @description: Function to be executed within a thread to encode a string\n  * @method encodeString\n  * @param {params} Object\n  */\n  encodeString() {\n    var returnCharacterCode = function(phrase) {\n      if(phrase.length > 1) {\n        return dictionary[phrase];\n      }\n      return phrase.charCodeAt(0);\n    };\n    var stringArray = [];\n    var n = 0;\n    for (n; n < params.array.length; n++) {\n      stringArray[n] = String.fromCharCode(params.array[n]);\n    }\n    var currentCharacter;\n    var output = [];\n    var dictionary = {};\n    var code = 256;\n    var phrase = stringArray[0];\n    var phrasePlusChar;\n    var i = 1;\n    for (i; i < stringArray.length; i++) {\n      currentCharacter = stringArray[i];\n      phrasePlusChar = dictionary[phrase + currentCharacter];\n      if (phrasePlusChar) {\n        phrase += currentCharacter;\n      } else {\n        output.push(returnCharacterCode(phrase));\n        dictionary[phrase + currentCharacter] = code;\n        code++;\n        phrase = currentCharacter;\n      }\n    }\n    output.push(returnCharacterCode(phrase));\n    for (i = 0; i < output.length; i++) {\n      rtn.data[i] = String.fromCharCode(output[i]);\n    }\n    rtn.data = rtn.data.join(\"\");\n  }\n\n  /**\n  * @description: Function to be executed within a thread to decode an already encoded string\n  * @method decodeString\n  * @param {params} Object\n  */\n  decodeString() {\n    var returnPhrase = function(currentCode, oldPhrase, currentCharacter) {\n      if(typeof dictionary[currentCode] !== 'undefined') {\n        return dictionary[currentCode];\n      }\n      return (oldPhrase + currentCharacter);\n    };\n    var stringArray = [];\n    var n = 0;\n    for (n; n < params.array.length; n++) {\n      stringArray[n] = String.fromCharCode(params.array[n]);\n    }\n    var currentCharacter = stringArray[0];\n    var oldPhrase = currentCharacter;\n    var code = 256;\n    var currentCode;\n    var currentPhrase;\n    var dictionary = {};\n    rtn.data.push(currentCharacter);\n    for (var i = 1; i < stringArray.length; i++) {\n      currentCode = params.array[i];\n      if (currentCode < 256) {\n        currentPhrase = stringArray[i];\n      } else {\n        currentPhrase = returnPhrase(currentCode, oldPhrase, currentCharacter);\n      }\n      rtn.data.push(currentPhrase);\n      currentCharacter = currentPhrase.charAt(0);\n      dictionary[code] = (oldPhrase + currentCharacter);\n      oldPhrase = currentPhrase;\n      code++;\n    }\n    rtn.data = rtn.data.join(\"\");\n  }\n\n}\n\nvar lzwFlossRedux = new lzwFlossReduxjs();\n\nif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n  module.exports = lzwFlossRedux;\n}\n\n\n// WEBPACK FOOTER //\n// ./lzwFlossRedux.js"],"sourceRoot":""}